/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  PendingBlkTimeAndNrAdvanceCheck,
  PendingBlkTimeAndNrAdvanceCheckInterface,
} from "../../../src/mocks/PendingBlkTimeAndNrAdvanceCheck";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "expected",
        type: "bytes32",
      },
    ],
    name: "checkArbBlockHashReturnsLatest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isAdvancing",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c080604052346100bf574260805263a3b1b31d60e01b815260208160048160645afa9081156100b357600091610056575b5060a05260405161034690816100c58239608051816101b5015260a051816102020152f35b9060203d81116100ac575b601f8101601f191683016001600160401b038111848210176100985760209184916040528101031261009557505138610031565b80fd5b634e487b7160e01b83526041600452602483fd5b503d610061565b6040513d6000823e3d90fd5b600080fdfe608060408181526004908136101561001657600080fd5b600092833560e01c9081634bc05a23146101a1575063e46c80b61461003a57600080fd5b3461019d576020908160031936011261019957805163a3b1b31d60e01b81528281858160645afa90811561014f57859161016c575b506000198101908111610159578151906315a03d4160e11b825284820152828160248160645afa90811561014f57859161011e575b5080156100ea578335036100b6578380f35b5162461bcd60e51b815291820152601060248201526f0aea49e9c8ebe84989e8696be9082a6960831b604482015260649150fd5b505162461bcd60e51b815291820152600f60248201526e0b48aa49ebe84989e8696be9082a69608b1b604482015260649150fd5b90508281813d8311610148575b61013581836102d7565b810103126101445751386100a4565b8480fd5b503d61012b565b82513d87823e3d90fd5b634e487b7160e01b855260118452602485fd5b90508281813d8311610192575b61018381836102d7565b8101031261014457513861006f565b503d610179565b8380fd5b8280fd5b9050346101995783600319360112610199577f00000000000000000000000000000000000000000000000000000000000000004211156102a05750805163a3b1b31d60e01b8152602081848160645afa908115610296578491610265575b507f0000000000000000000000000000000000000000000000000000000000000000101561022b578280f35b906020606492519162461bcd60e51b83528201526014602482015273426c6f636b206469646e277420616476616e636560601b6044820152fd5b90506020813d821161028e575b8161027f602093836102d7565b810103126101995751386101ff565b3d9150610272565b82513d86823e3d90fd5b62461bcd60e51b8152602083820152601360248201527254696d65206469646e277420616476616e636560681b6044820152606490fd5b601f909101601f19168101906001600160401b038211908210176102fa57604052565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220370fcc1e2465a6686f7f59d491ff143dfd19103c6cd2572163ad082d3ccac6a064736f6c63430008130033";

type PendingBlkTimeAndNrAdvanceCheckConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PendingBlkTimeAndNrAdvanceCheckConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PendingBlkTimeAndNrAdvanceCheck__factory extends ContractFactory {
  constructor(...args: PendingBlkTimeAndNrAdvanceCheckConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PendingBlkTimeAndNrAdvanceCheck> {
    return super.deploy(
      overrides || {}
    ) as Promise<PendingBlkTimeAndNrAdvanceCheck>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PendingBlkTimeAndNrAdvanceCheck {
    return super.attach(address) as PendingBlkTimeAndNrAdvanceCheck;
  }
  override connect(signer: Signer): PendingBlkTimeAndNrAdvanceCheck__factory {
    return super.connect(signer) as PendingBlkTimeAndNrAdvanceCheck__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PendingBlkTimeAndNrAdvanceCheckInterface {
    return new utils.Interface(
      _abi
    ) as PendingBlkTimeAndNrAdvanceCheckInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PendingBlkTimeAndNrAdvanceCheck {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as PendingBlkTimeAndNrAdvanceCheck;
  }
}
