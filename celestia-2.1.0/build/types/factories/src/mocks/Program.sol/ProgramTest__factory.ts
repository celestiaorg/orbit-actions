/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ProgramTest,
  ProgramTestInterface,
} from "../../../../src/mocks/Program.sol/ProgramTest";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "result",
        type: "bytes32",
      },
    ],
    name: "Hash",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "program",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "callKeccak",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "program",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "expected",
        type: "bytes",
      },
    ],
    name: "checkRevertData",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "program",
        type: "address",
      },
    ],
    name: "mathTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "program",
        type: "address",
      },
      {
        internalType: "address",
        name: "fundedAccount",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "gas",
        type: "uint64",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "staticcallEvmData",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "program",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "staticcallProgram",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610bdd908161001c8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c918483631d00bae4146107ee57505081633fdd58e2146107a357816396ec12e51461060d578163aba8c4ba146100c7575063fd4244621461005e57600080fd5b346100c35760203660031901126100c357818080808061007c6108c1565b5af161008f6100896109fb565b91610a2b565b60208151910120905160208101906715d41b922f2eafc58252602081526100b58161098c565b519020036100c05780f35b80fd5b5080fd5b8383346100c35760803660031901126100c3576100e26108c1565b60248035936001600160a01b03939091908486168603610609576044356001600160401b0381811691829003610605576064359081116106055784918661012d849336908d016108dc565b9190828751938492833781018581520392fa9361015161014b6109fb565b95610a2b565b6000194301944386116105f35761024461021a6101f06101c661019c87519a6101798c61098c565b600d9b8c81526020976c0313637b1b590373ab6b132b91609d1b89830152610af0565b87516101a78161098c565b8b81526c031b430b4b71034b2101010101609d1b878201524691610af0565b86516101d18161098c565b8a81526c03130b9b2903332b2901010101609d1b868201524891610af0565b85516101fb8161098c565b8981526c033b0b990383934b1b29010101609d1b858201523a91610af0565b84516102258161098c565b8881526c033b0b9903634b6b4ba1010101609d1b848201524591610af0565b9280516102508161098c565b8781526c03b30b63ab2901010101010101609d1b8382015282858051810103126105ef57828501516105cc57508351601f1997908881019081116105ba5761029790610a88565b98835b86518110156102f2576001600160f81b03196102b68289610ac9565b51168a8201908282116102e0576102d56102db93928e928d1a92610ac9565b53610aba565b61029a565b634e487b7160e01b8b5260118f52898bfd5b50869550908b6104a161047361044761041c8f8f61039e8f99898c918f8f6c0393ab9ba1030b2323932b9b99609d1b906103866103f29961035a6103c89a895161033b8161098c565b8981526c03a34b6b2b9ba30b6b81010101609d1b868201524291610af0565b9031908851906103698261098c565b8882526c03130b630b731b290101010101609d1b85830152610af0565b9551946103928661098c565b85528401521691610af0565b8a516103a98161098c565b8981526c039b2b73232b91010101010101609d1b8d8201523091610af0565b89516103d38161098c565b8881526c037b934b3b4b71010101010101609d1b8c8201523291610af0565b88516103fd8161098c565b8781526c031b7b4b73130b9b2901010101609d1b8b8201524191610af0565b87518a3f9161042a8261098c565b8782526c0e4eae6e840c6dec8cad0c2e6d609b1b8b830152610af0565b865160693f916104568261098c565b8682526c030b9311031b7b232b430b9b41609d1b8a830152610af0565b600193843f918751916104858361098c565b82526c032ba341031b7b232b430b9b41609d1b89830152610af0565b966104ac873b610a88565b873b855b818110610590575050868151910120873b6104ca816109e0565b6104d6885191826109bd565b8181528881019187838c3c51902003610569575050856105036104fe83979851893b90610a65565b610a88565b96803b903b925b610525575b8451868152806105218189018b61094c565b0390f35b81518110156105645761055e906001600160f81b03196105458285610ac9565b51166102d56105548684610a65565b91871a918b610ac9565b8661050a565b61050f565b606491869186519262461bcd60e51b84528284015282015263636f646560e01b6044820152fd5b6105b5906001600160f81b03196105a7828e610ac9565b5116881a6102d58286610ac9565b6104b0565b634e487b7160e01b885260118c528688fd5b6105eb90868c935194859462461bcd60e51b865285015283019061094c565b0390fd5b8680fd5b634e487b7160e01b8552601189528385fd5b8480fd5b8280fd5b9190506060366003190112610609576106246108c1565b90602490846001600160401b0383358181116106095761064790369088016108dc565b929091604496873591821161060957610664839236908b016108dc565b95909481885192839283378101848152039134905af1966106836109fb565b9761076d578288510361073157805b885181101561071c576001600160f81b0319806106af838c610ac9565b5116908583101561070a578285013516036106d2576106cd90610aba565b610692565b845162461bcd60e51b81526020818a0152601481880152730e4caeccae4e840c8c2e8c240dad2e6dac2e8c6d60631b81890152606490fd5b634e487b7160e01b845260328a528784fd5b8451602080825281906105219082018c61094c565b835162461bcd60e51b8152602081890152601881870152770eee4dedcce40e4caeccae4e840c8c2e8c240d8cadccee8d60431b81880152606490fd5b835162461bcd60e51b815260208189015260128187015271756e6578706563746564207375636365737360701b81880152606490fd5b5050346100c35781610521926107b836610909565b908186519283928337810184815203915afa906107dc6107d66109fb565b92610a2b565b5191829160208352602083019061094c565b908185346100c357818061080136610909565b9591909686888237828188810182815203925af19361082161014b6109fb565b6020855195015194602081106108ab575b507f224c8d9ad1bbf0f44a61d7bd8e7e9049b1a320e04b047da9910945675c31ba4360208451878152a1836001116100c35760001984019361087f610876866109e0565b945194856109bd565b848452602084019436828401116108a7576001601f9301863783010152519020036100c05780f35b8380fd5b6000959195199060200360031b1b169386610832565b600435906001600160a01b03821682036108d757565b600080fd5b9181601f840112156108d7578235916001600160401b0383116108d757602083818601950101116108d757565b9060406003198301126108d7576004356001600160a01b03811681036108d75791602435906001600160401b0382116108d757610948916004016108dc565b9091565b919082519283825260005b848110610978575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610957565b604081019081106001600160401b038211176109a757604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176109a757604052565b6001600160401b0381116109a757601f01601f191660200190565b3d15610a26573d90610a0c826109e0565b91610a1a60405193846109bd565b82523d6000602084013e565b606090565b15610a3257565b60405162461bcd60e51b815260206004820152600b60248201526a18d85b1b0819985a5b195960aa1b6044820152606490fd5b91908203918211610a7257565b634e487b7160e01b600052601160045260246000fd5b90610a92826109e0565b610a9f60405191826109bd565b8281528092610ab0601f19916109e0565b0190602036910137565b6000198114610a725760010190565b908151811015610ada570160200190565b634e487b7160e01b600052603260045260246000fd5b92916020848051810103126108d757602084015103610b8357508151601f199290838101908111610a7257610b2490610a88565b9060205b8151811015610b7c576001600160f81b0319610b448284610ac9565b511690858101818111610b67576102d5610b629360001a9186610ac9565b610b28565b60246000634e487b7160e01b81526011600452fd5b5090925050565b60405162461bcd60e51b8152602060048201529081906105eb90602483019061094c56fea26469706673582212204a549763158754028e490108da298bccead335dd6c80705d48840615278b919164736f6c63430008130033";

type ProgramTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProgramTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProgramTest__factory extends ContractFactory {
  constructor(...args: ProgramTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ProgramTest> {
    return super.deploy(overrides || {}) as Promise<ProgramTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ProgramTest {
    return super.attach(address) as ProgramTest;
  }
  override connect(signer: Signer): ProgramTest__factory {
    return super.connect(signer) as ProgramTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProgramTestInterface {
    return new utils.Interface(_abi) as ProgramTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProgramTest {
    return new Contract(address, _abi, signerOrProvider) as ProgramTest;
  }
}
