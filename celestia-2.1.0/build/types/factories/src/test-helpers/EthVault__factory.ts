/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  EthVault,
  EthVaultInterface,
} from "../../../src/test-helpers/EthVault";

const _abi = [
  {
    inputs: [],
    name: "justRevert",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_version",
        type: "uint256",
      },
    ],
    name: "setVersion",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60808060405234610019576000805560dd908161001f8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c908163408def1e14609357816350b23fd214605b57506354fd4d5014603e57600080fd5b346058578060031936011260585760209054604051908152f35b80fd5b905081600319360112608f5762461bcd60e51b815260206004820152600360248201526262796560e81b6044820152606490fd5b5080fd5b826020366003190112605857600435815580f3fea26469706673582212207d45dd451f241d1c829b495fa48f115137e3a493260535d9b01d9320f396c96d64736f6c63430008130033";

type EthVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EthVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EthVault__factory extends ContractFactory {
  constructor(...args: EthVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<EthVault> {
    return super.deploy(overrides || {}) as Promise<EthVault>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): EthVault {
    return super.attach(address) as EthVault;
  }
  override connect(signer: Signer): EthVault__factory {
    return super.connect(signer) as EthVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EthVaultInterface {
    return new utils.Interface(_abi) as EthVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EthVault {
    return new Contract(address, _abi, signerOrProvider) as EthVault;
  }
}
