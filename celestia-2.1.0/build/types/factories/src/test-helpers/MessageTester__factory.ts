/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MessageTester,
  MessageTesterInterface,
} from "../../../src/test-helpers/MessageTester";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "inbox",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "message",
        type: "bytes32",
      },
    ],
    name: "accumulateInboxMessage",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "messageType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "blockNumber",
        type: "uint64",
      },
      {
        internalType: "uint64",
        name: "timestamp",
        type: "uint64",
      },
      {
        internalType: "uint256",
        name: "inboxSeqNum",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gasPriceL1",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "messageDataHash",
        type: "bytes32",
      },
    ],
    name: "messageHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60808060405234610016576101b5908161001c8239f35b600080fdfe6080604090808252600436101561001557600080fd5b600090813560e01c9081638f3c79c014610132575063bf0090521461003957600080fd5b3461012f5760e036600319011261012f5760043560ff8116810361012b576024356001600160a01b0381168103610127576001600160401b0392604435848116810361012b57606435858116810361012757865160f89590951b6001600160f81b0319166020860190815260609490941b6001600160601b031916602186015260c091821b6001600160c01b0319908116603587015290821b16603d850152608435604585015260a435606585015260c4356085808601919091528452830193919291841182851017610113575082602094525190208152f35b634e487b7160e01b81526041600452602490fd5b8280fd5b5080fd5b80fd5b90503461012b578260031936011261012b57600435602082019081526024358483015283825260608201929091906001600160401b03841182851017610113575082602094525190208152f3fea26469706673582212203b13f501c6b6eab9bb459bb21dbeac9cae30e55fba4d0c1039241eab7b3eb56c64736f6c63430008130033";

type MessageTesterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MessageTesterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MessageTester__factory extends ContractFactory {
  constructor(...args: MessageTesterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MessageTester> {
    return super.deploy(overrides || {}) as Promise<MessageTester>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MessageTester {
    return super.attach(address) as MessageTester;
  }
  override connect(signer: Signer): MessageTester__factory {
    return super.connect(signer) as MessageTester__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MessageTesterInterface {
    return new utils.Interface(_abi) as MessageTesterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MessageTester {
    return new Contract(address, _abi, signerOrProvider) as MessageTester;
  }
}
