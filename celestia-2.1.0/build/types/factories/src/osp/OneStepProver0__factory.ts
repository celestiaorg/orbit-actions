/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  OneStepProver0,
  OneStepProver0Interface,
} from "../../../src/osp/OneStepProver0";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "maxInboxMessagesRead",
            type: "uint256",
          },
          {
            internalType: "contract IBridge",
            name: "bridge",
            type: "address",
          },
        ],
        internalType: "struct ExecutionContext",
        name: "",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum MachineStatus",
            name: "status",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "enum ValueType",
                        name: "valueType",
                        type: "uint8",
                      },
                      {
                        internalType: "uint256",
                        name: "contents",
                        type: "uint256",
                      },
                    ],
                    internalType: "struct Value[]",
                    name: "inner",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ValueArray",
                name: "proved",
                type: "tuple",
              },
              {
                internalType: "bytes32",
                name: "remainingHash",
                type: "bytes32",
              },
            ],
            internalType: "struct ValueStack",
            name: "valueStack",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "inactiveStackHash",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "remainingHash",
                type: "bytes32",
              },
            ],
            internalType: "struct MultiStack",
            name: "valueMultiStack",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "enum ValueType",
                        name: "valueType",
                        type: "uint8",
                      },
                      {
                        internalType: "uint256",
                        name: "contents",
                        type: "uint256",
                      },
                    ],
                    internalType: "struct Value[]",
                    name: "inner",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ValueArray",
                name: "proved",
                type: "tuple",
              },
              {
                internalType: "bytes32",
                name: "remainingHash",
                type: "bytes32",
              },
            ],
            internalType: "struct ValueStack",
            name: "internalStack",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "enum ValueType",
                        name: "valueType",
                        type: "uint8",
                      },
                      {
                        internalType: "uint256",
                        name: "contents",
                        type: "uint256",
                      },
                    ],
                    internalType: "struct Value",
                    name: "returnPc",
                    type: "tuple",
                  },
                  {
                    internalType: "bytes32",
                    name: "localsMerkleRoot",
                    type: "bytes32",
                  },
                  {
                    internalType: "uint32",
                    name: "callerModule",
                    type: "uint32",
                  },
                  {
                    internalType: "uint32",
                    name: "callerModuleInternals",
                    type: "uint32",
                  },
                ],
                internalType: "struct StackFrame[]",
                name: "proved",
                type: "tuple[]",
              },
              {
                internalType: "bytes32",
                name: "remainingHash",
                type: "bytes32",
              },
            ],
            internalType: "struct StackFrameWindow",
            name: "frameStack",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "inactiveStackHash",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "remainingHash",
                type: "bytes32",
              },
            ],
            internalType: "struct MultiStack",
            name: "frameMultiStack",
            type: "tuple",
          },
          {
            internalType: "bytes32",
            name: "globalStateHash",
            type: "bytes32",
          },
          {
            internalType: "uint32",
            name: "moduleIdx",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "functionIdx",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "functionPc",
            type: "uint32",
          },
          {
            internalType: "bytes32",
            name: "recoveryPc",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "modulesRoot",
            type: "bytes32",
          },
        ],
        internalType: "struct Machine",
        name: "startMach",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "globalsMerkleRoot",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "uint64",
                name: "size",
                type: "uint64",
              },
              {
                internalType: "uint64",
                name: "maxSize",
                type: "uint64",
              },
              {
                internalType: "bytes32",
                name: "merkleRoot",
                type: "bytes32",
              },
            ],
            internalType: "struct ModuleMemory",
            name: "moduleMemory",
            type: "tuple",
          },
          {
            internalType: "bytes32",
            name: "tablesMerkleRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "functionsMerkleRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "extraHash",
            type: "bytes32",
          },
          {
            internalType: "uint32",
            name: "internalsOffset",
            type: "uint32",
          },
        ],
        internalType: "struct Module",
        name: "startMod",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint16",
            name: "opcode",
            type: "uint16",
          },
          {
            internalType: "uint256",
            name: "argumentData",
            type: "uint256",
          },
        ],
        internalType: "struct Instruction",
        name: "inst",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "executeOneStep",
    outputs: [
      {
        components: [
          {
            internalType: "enum MachineStatus",
            name: "status",
            type: "uint8",
          },
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "enum ValueType",
                        name: "valueType",
                        type: "uint8",
                      },
                      {
                        internalType: "uint256",
                        name: "contents",
                        type: "uint256",
                      },
                    ],
                    internalType: "struct Value[]",
                    name: "inner",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ValueArray",
                name: "proved",
                type: "tuple",
              },
              {
                internalType: "bytes32",
                name: "remainingHash",
                type: "bytes32",
              },
            ],
            internalType: "struct ValueStack",
            name: "valueStack",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "inactiveStackHash",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "remainingHash",
                type: "bytes32",
              },
            ],
            internalType: "struct MultiStack",
            name: "valueMultiStack",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "enum ValueType",
                        name: "valueType",
                        type: "uint8",
                      },
                      {
                        internalType: "uint256",
                        name: "contents",
                        type: "uint256",
                      },
                    ],
                    internalType: "struct Value[]",
                    name: "inner",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ValueArray",
                name: "proved",
                type: "tuple",
              },
              {
                internalType: "bytes32",
                name: "remainingHash",
                type: "bytes32",
              },
            ],
            internalType: "struct ValueStack",
            name: "internalStack",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "enum ValueType",
                        name: "valueType",
                        type: "uint8",
                      },
                      {
                        internalType: "uint256",
                        name: "contents",
                        type: "uint256",
                      },
                    ],
                    internalType: "struct Value",
                    name: "returnPc",
                    type: "tuple",
                  },
                  {
                    internalType: "bytes32",
                    name: "localsMerkleRoot",
                    type: "bytes32",
                  },
                  {
                    internalType: "uint32",
                    name: "callerModule",
                    type: "uint32",
                  },
                  {
                    internalType: "uint32",
                    name: "callerModuleInternals",
                    type: "uint32",
                  },
                ],
                internalType: "struct StackFrame[]",
                name: "proved",
                type: "tuple[]",
              },
              {
                internalType: "bytes32",
                name: "remainingHash",
                type: "bytes32",
              },
            ],
            internalType: "struct StackFrameWindow",
            name: "frameStack",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "inactiveStackHash",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "remainingHash",
                type: "bytes32",
              },
            ],
            internalType: "struct MultiStack",
            name: "frameMultiStack",
            type: "tuple",
          },
          {
            internalType: "bytes32",
            name: "globalStateHash",
            type: "bytes32",
          },
          {
            internalType: "uint32",
            name: "moduleIdx",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "functionIdx",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "functionPc",
            type: "uint32",
          },
          {
            internalType: "bytes32",
            name: "recoveryPc",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "modulesRoot",
            type: "bytes32",
          },
        ],
        internalType: "struct Machine",
        name: "mach",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "globalsMerkleRoot",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "uint64",
                name: "size",
                type: "uint64",
              },
              {
                internalType: "uint64",
                name: "maxSize",
                type: "uint64",
              },
              {
                internalType: "bytes32",
                name: "merkleRoot",
                type: "bytes32",
              },
            ],
            internalType: "struct ModuleMemory",
            name: "moduleMemory",
            type: "tuple",
          },
          {
            internalType: "bytes32",
            name: "tablesMerkleRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "functionsMerkleRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "extraHash",
            type: "bytes32",
          },
          {
            internalType: "uint32",
            name: "internalsOffset",
            type: "uint32",
          },
        ],
        internalType: "struct Module",
        name: "mod",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576125d5908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c633604366f1461002757600080fd5b346112745736600319016101c0811261127457604013611274576001600160401b0360443511611274576101c0604435360360031901126112745761010036606319011261127457604036610163190112611274576001600160401b036101a43511611274573660236101a435011215611274576001600160401b0360046101a435013511611274573660246101a435600401356101a435010111611274576100d06080611351565b60006080526100dd611417565b60a0526040516100ec8161136d565b6000808252602082015260c052610101611417565b60e0526040516101108161136d565b60608152600060208201526101005260405161012b8161136d565b600080825260208201819052610120919091526101408190526101608190526101808190526101a08190526101c08190526101e05261016861145e565b5060405161017581611351565b6004604435810135101561127457604435600481013582526001600160401b0360249091013511611274576101b5366044356024810135016004016114df565b60208201526101c83660448035016115b4565b60408201526001600160401b036044356084013511611274576101f6366044356084810135016004016114df565b60608201526001600160401b0360443560a401351161127457604060443560a48101350136036003190112611274576040516102318161136d565b60443560a481013501600401356001600160401b038111611274573660443560a481013501820160230112156112745760443560a4810135018101600401359061027a82611496565b9161028860405193846113f4565b80835260208301913660443560a481013501820160a0840201602401116112745760443560a481013501810160240192905b60443560a481013501810160a0840201602401841061127957505050508152602460a46044350135604435010135602082015260808201526103013660c4604435016115b4565b60a0820152610104604435013560c0820152610322610124604435016115dc565b60e0820152610336610144604435016115dc565b61010082015261034b610164604435016115dc565b6101208201526044356101848101356101408301526101a4013561016082015260405190610378826113a3565b6064358252606036608319011261127457604051610395816113be565b6084356001600160401b038116900361127457608435815260a4356001600160401b03811690036112745760a435602082015260c4356040820152602083015260e435604083015261010435606083015261012435608083015263ffffffff61014435166101443503611274576101443560a083015261ffff6104166115ed565b16806110d1575060155b806015146110c75780601414610ffb57806003146110015780600514610fed5780600414610f985780601314610f535780601214610f085780601114610ec05780601014610e365780600f14610a5a5780600e14610a4f5780600d14610a355780600c14610a1e5780600b146109dc5780600a146109a95780600914610963578060081461093f578060071461090a57806006146107db5780600214610720576001146104dd57634e487b7160e01b600052605160045260246000fd5b6020810151600060206040516104f28161136d565b8281520152518051518060001981011161070a576105399161052e916000602060405161051e8161136d565b8281520152600019019051611fb6565b516020830151612528565b604051906101208252805160048110156106f45761012083015261056f60208201516101c06101408501526102e08401906112f4565b9060206040820151805161016086015201516101808401526105a560608201519261011f199384868303016101a08701526112f4565b608082015192848203016101c08501528251926040825260408201845180915260206060840195019060005b8181106106ad575050509461016063ffffffff9360a093602080899a015191015260208482015180516101e08a0152015161020088015260c08101516102208801528460e082015116610240880152846101008201511661026088015284610120820151166102808801526101408101516102a088015201516102c08601528051602086015260406020820151600180831b0381511682880152600180831b03602082015116606088015201516080860152604081015182860152606081015160c0860152608081015160e08601520151166101008301520390f35b909195602060a060019263ffffffff60608b516106cb8482516112dc565b8581015160408501528260408201511682850152015116608082015201970191019190916105d1565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b50600060206040516107318161136d565b828152015261800561ffff6107446115ed565b16036107695761076461075a60208301516123ff565b6060830151612528565b610539565b61800661ffff6107776115ed565b16036107975761076461078d60608301516123ff565b6020830151612528565b60405162461bcd60e51b815260206004820152601c60248201527b4d4f56455f494e5445524e414c5f494e56414c49445f4f50434f444560201b6044820152606490fd5b50906107ea60208301516123ff565b9163ffffffff6107fd60208301516123ff565b938161081e61081861081260208701516123ff565b97612344565b92612344565b916040519661082c88611388565b87526101843560208801521660408601521660608401526080810151918251519160018301831161070a5761086360018401611496565b9261087160405194856113f4565b600101808452601f199061088490611496565b0160005b8181106108f357505060005b845180518210156108ce57906108ad816108c993611fb6565b516108b88287611fb6565b526108c38186611fb6565b50611e1e565b610894565b50509290936108ec90825151906108e58286611fb6565b5283611fb6565b5052610539565b6020906108fe612261565b82828801015201610888565b5061093861091b60208301516123ff565b83516101a435600401359160246101a43501916101843590611da6565b8252610539565b5061076461078d83516101a435600401359060246101a43501906101843590611d3f565b5061097160208201516123ff565b6109a2602061098360808501516122da565b019182516101a435600401359160246101a43501916101843590611da6565b9052610539565b5061076461078d60206109bf60808501516122da565b01516101a435600401359060246101a43501906101843590611d3f565b5063ffffffff6109f76109f260208401516123ff565b612344565b16156105395761018435610a1363ffffffff821691821461160b565b610120820152610539565b5061018435610a1363ffffffff821691821461160b565b506107646101a4356004013560246101a435018484611805565b506107648282611721565b50610a6b6109f260208301516123ff565b610a7361145e565b506060604051610a82816113d9565b52610a8b61145e565b50610a9461143f565b506000906000805b60208110610dfb5750610aec610b3b610aec610b03610ad5610b5295610ac061143f565b506101a4356004013560246101a43501611e2d565b6101a4959195356004013560246101a43501611e2d565b6101a4929192356004013560246101a43501611e7f565b9160405195610b11876113be565b6001600160401b03908116875216602086015260408501526101a435600481013590602401611e7f565b6101a4949194356004013560246101a43501611e7f565b9390916000949360005b60048110610db857509163ffffffff9391610baf969360405199610b7f8b6113a3565b8a5260208a01526040890152606088015260808701521660a08501526101a4356004013560246101a43501611fca565b5082519060208401518051604060208301519201516040519160208301936626b2b6b7b93c9d60c91b855260018060c01b0319809260c01b16602785015260c01b16602f830152603782015260378152610c08816113be565b5190206040850151606086015160808701519160a088015193604051966626b7b23ab6329d60c91b6020890152602788015260478701526067860152608785015260a784015263ffffffff60e01b9060e01b1660c783015260ab82528160e081011060018060401b0360e084011117610da2578160e0610ccd930160405260e08151602083012091610c9b82820161136d565b6013828201527226b7b23ab6329036b2b935b632903a3932b29d60691b610100820152019163ffffffff851690612181565b61016084015103610d525763ffffffff60a0819382610d3e94610cfd6020890151610cf78a611647565b90612528565b610d146020890151610cf78460e08c0151166123cb565b610d2a6020890151610cf784878d0151166123cb565b1660e0870152015116826101843516611709565b166101008201526000610120820152610539565b60405162461bcd60e51b815260206004820152602260248201527f43524f53535f4d4f44554c455f494e5445524e414c5f4d4f44554c45535f524f60448201526113d560f21b6064820152608490fd5b634e487b7160e01b600052604160045260246000fd5b95610ded610df39163ffffff00610ddd896101a4356004013560246101a43501611dfc565b3560f81c9160081b161796611e1e565b96611e1e565b959495610b5c565b9092610e2b610e3191610e1c866101a4356004013560246101a43501611dfc565b3560f81c9060081b1794611e1e565b91611e1e565b610a9c565b50610e486020820151610cf783611647565b610e8b610e5860808301516122da565b610e736020840151610cf763ffffffff6040850151166123cb565b610cf763ffffffff60606020860151930151166123cb565b63ffffffff61018435610ea18160401c156116c0565b818160201c1660e0840152166101008201526000610120820152610539565b50610ed26020820151610cf783611647565b610eed6020820151610cf763ffffffff60e0850151166123cb565b610e8b6020820151610cf763ffffffff60a0860151166123cb565b50610f1a6020820151610cf783611647565b610f2a610e5860808301516122da565b61018435610f4063ffffffff821691821461160b565b6101008201526000610120820152610539565b506107646080820151610f64612261565b50610f7360018251511461229a565b610f7d8151611fa9565b519060405190610f8c826113d9565b6000825252518261208b565b50610fa96109f260208301516123ff565b610fb660208301516123ff565b63ffffffff610fc860208501516123ff565b921615610fde5750610764906020830151612528565b61076491506020830151612528565b50610ffb60208201516123ff565b50610539565b5061ffff61100d6115ed565b166041810361104f575061076460005b6020830151611038604051926110328461136d565b836115ff565b610184356001600160401b03166020830152612528565b604281036110625750610764600161101d565b604381036110755750610764600261101d565b60440361108657610764600361101d565b60405162461bcd60e51b8152602060048201526019602482015278434f4e53545f505553485f494e56414c49445f4f50434f444560381b6044820152606490fd5b5060028152610539565b600181036110e157506014610420565b600f81036110f157506013610420565b6010810361110157506012610420565b618009810361111257506011610420565b61800b810361112357506010610420565b61800c81036111345750600f610420565b61800a81036111455750600e610420565b601181036111555750600d610420565b61800381036111665750600c610420565b61800481036111775750600b610420565b602081036111875750600a610420565b6021810361119757506009610420565b602381036111a757506008610420565b602481036111b757506007610420565b61800281036111c857506006610420565b601a81036111d857506005610420565b601b81036111e857506004610420565b604181101580611269575b1561120057506003610420565b6180058114801561125e575b1561121957506002610420565b61800803611228576001610420565b60405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f4f50434f444560901b6044820152606490fd5b50618006811461120c565b5060448111156111f3565b600080fd5b60a0843603126112745760a080602060249460405161129781611388565b6112a1368a6114ad565b81526040890135838201526112b860608a016115dc565b60408201526112c960808a016115dc565b60608201528152019501949250506102ba565b805160078110156106f4578252602090810151910152565b908151604092838352606083019151936020928382860152855180915283608086019601916000905b828210611331575050505081015191015290565b909192968582826113456001948c516112dc565b0198019392019061131d565b61018081019081106001600160401b03821117610da257604052565b604081019081106001600160401b03821117610da257604052565b608081019081106001600160401b03821117610da257604052565b60c081019081106001600160401b03821117610da257604052565b606081019081106001600160401b03821117610da257604052565b602081019081106001600160401b03821117610da257604052565b601f909101601f19168101906001600160401b03821190821017610da257604052565b604051906114248261136d565b6000602083604051611435816113d9565b6060815281520152565b6040519061144c826113be565b60006040838281528260208201520152565b6040519061146b826113a3565b600060a08382815261147b61143f565b60208201528260408201528260608201528260808201520152565b6001600160401b038111610da25760051b60200190565b9190826040910312611274576040516114c58161136d565b809280356007811015611274578252602090810135910152565b604092918181038413611274578351916114f88361136d565b829481359260018060401b039384811161127457830191602094858484031261127457815193611527856113d9565b8035918211611274570182601f8201121561127457803561154781611496565b93611554845195866113f4565b818552878086019260061b84010192818411611274579088809897969594939201915b83831061158e575050505050815284520135910152565b9784959697986115a28385969794956114ad565b81520192019088979695949392611577565b9190826040910312611274576040516115cc8161136d565b6020808294803584520135910152565b359063ffffffff8216820361127457565b6101643561ffff811681036112745790565b60078210156106f45752565b1561161257565b60405162461bcd60e51b815260206004820152600d60248201526c4241445f43414c4c5f4441544160981b6044820152606490fd5b600060206040516116578161136d565b828152015263ffffffff610120820151169060e061010082015191015191600060206040516116858161136d565b8281520152604051926116978461136d565b6006845263ffffffff60401b9060401b169163ffffffff60201b9060201b161717602082015290565b156116c757565b60405162461bcd60e51b815260206004820152601a6024820152794241445f43524f53535f4d4f44554c455f43414c4c5f4441544160301b6044820152606490fd5b91909163ffffffff8080941691160191821161070a57565b9061175c91611766602082019261173c8451610cf785611647565b610cf7845160a060e086019663ffffffff988993610cf7858b51166123cb565b51930151166123cb565b61177360808201516122da565b92606084019281845116156117fb57610184358281169081036117b65782610120956117ab9382604060009a01511690525116611709565b166101008201520152565b60405162461bcd60e51b815260206004820152601d60248201527f4241445f43414c4c45525f494e5445524e414c5f43414c4c5f444154410000006044820152606490fd5b5050600290525050565b6000936020938483019261181c6109f285516123ff565b6040966060885161182c816113d9565b5288978896875b600890818c10156118755761186e9167ffffffffffffff006118689261185a8d8d8d611dfc565b3560f81c921b161799611e1e565b9a611e1e565b9997611833565b90506118c0949a506118946118ca929893999c969c9a949a8489611e7f565b9190946118b66118af6118a885888d611dfc565b3594611e1e565b868b611e2d565b868b999299611e7f565b868b969296611fca565b938d8d519081016d21b0b6361034b73234b932b1ba1d60911b815260018060c01b031991828760c01b16602e8201528a60368201526036815261190c816113be565b5190206101843503611cc3578d928f919261199a9385519084820192652a30b136329d60d11b845260ff60f81b1660268301528d60c01b16602782015289602f820152602f815261195c816113be565b51902090712a30b136329036b2b935b632903a3932b29d60711b8551936119828561136d565b601285528401526001600160401b0396871690612181565b91015103611c8d5763ffffffff809c169516851015611c7c576119de90868b8b516119c48161136d565b828152015260608a516119d6816113d9565b528388611e7f565b949092868b8b516119ee8161136d565b8281520152611a0b611a0187838b611dfc565b3560f81c96611e1e565b60068711611c4757611a1e90828a611e7f565b9190986007881015611c33578c92611acc9492611a5592611a4a8f519b611a448d61136d565b8c6115ff565b858b019c8d52611fca565b5090611a60886122ff565b8c51848101916d2a30b136329032b632b6b2b73a1d60911b835288602e830152604e820152604e8152611a9281611388565b51902091792a30b136329032b632b6b2b73a1036b2b935b632903a3932b29d60311b8d5194611ac08661136d565b601a8652850152612181565b03611bfb5703611bee5780516007811015611bda57600403611af5575050505050505060029052565b51906007821015611bc65750600503611b92575192848416938403611b575750916117ab8492610cf761012096606060009997611b368151610cf78b611647565b61175c611b4660808b01516122da565b95610cf785845192890151166123cb565b60649083519062461bcd60e51b8252600482015260156024820152744241445f46554e435f5245465f434f4e54454e545360581b6044820152fd5b825162461bcd60e51b815260048101859052600d60248201526c4241445f454c454d5f5459504560981b6044820152606490fd5b634e487b7160e01b81526021600452602490fd5b634e487b7160e01b83526021600452602483fd5b5050505050505060029052565b865162461bcd60e51b815260048101899052601160248201527010905117d153115351539514d7d493d3d5607a1b6044820152606490fd5b634e487b7160e01b89526021600452602489fd5b8a5162461bcd60e51b8152600481018d9052600e60248201526d4241445f56414c55455f5459504560901b6044820152606490fd5b505050505050505050505060029052565b895162461bcd60e51b8152600481018c9052600f60248201526e10905117d51050931154d7d493d3d5608a1b6044820152606490fd5b60648f8f519062461bcd60e51b8252600482015260166024820152754241445f43414c4c5f494e4449524543545f4441544160501b6044820152fd5b15611d0657565b60405162461bcd60e51b815260206004820152601160248201527015d493d391d7d3515492d31157d493d3d5607a1b6044820152606490fd5b90611da392611d9d9160006020604051611d588161136d565b828152015260006020604051611d6d8161136d565b82815201526060604051611d80816113d9565b52611d97611d8e8784611ec6565b90978894611fca565b5061210d565b14611cff565b90565b611df790611d9d611dee611da3979694959660006020604051611dc88161136d565b82815201526060604051611ddb816113d9565b52611de68187611ec6565b919096611fca565b5093858561210d565b61210d565b90821015611e08570190565b634e487b7160e01b600052603260045260246000fd5b600019811461070a5760010190565b9192600091825b60089081851015611e7657611e6f9167ffffffffffffff00611e6992611e5b8a878b611dfc565b3560f81c921b161796611e1e565b93611e1e565b9294611e34565b95945050509050565b600093918491905b60208310611e9457505050565b90919394611eb9611ebf91611eaa888587611dfc565b3560f81c9060081b1796611e1e565b94611e1e565b9190611e87565b60405191611ed38361136d565b600092838152836020809201528115611f955760f8918335831c9360068511611f5f579290859360019287925b858410611f325750505050936007841015611bc65750611f2c60405193611f268561136d565b846115ff565b82015291565b9091929395611eb9611f5791611f49898588611dfc565b35851c9060081b1797611e1e565b929190611f00565b60405162461bcd60e51b815260048101849052600e60248201526d4241445f56414c55455f5459504560901b6044820152606490fd5b634e487b7160e01b84526032600452602484fd5b805115611e085760200190565b8051821015611e085760209160051b010190565b916060604051611fd9816113d9565b52611ff2611fe8828486611dfc565b3560f81c91611e1e565b611ffb82611496565b9261200960405194856113f4565b828452601f1961201884611496565b01366020860137600094855b60ff811693858510156120725761203f612049918585611e7f565b9190919588611fb6565b5260ff80911690811461205e57600101612024565b634e487b7160e01b87526011600452602487fd5b9650505050505060405190612086826113d9565b815291565b90805160078110156106f4576004146120cc57805160078110156106f4576006036120cc5760206120be910151826120d3565b156120c65750565b60029052565b5060029052565b908060601c6121065760e09063ffffffff90818116610120850152818160201c1661010085015260401c16910152600190565b5050600090565b9061211a611da3936122ff565b90604051926121288461136d565b60128452712b30b63ab29036b2b935b632903a3932b29d60711b6020850152612181565b9392909384519060005b82811061216e57500191825260208201526040019150565b8060208092890101518184015201612156565b92939091936000925b845195865185101561221d57906121ea9160019786898416156000146121f0576121d091506121bd6121de918a51611fb6565b516040519283916020830195898761214c565b03601f1981018352826113f4565b519020965b1c93611e1e565b9261218a565b612200612214916121d093611fb6565b51926040519283916020830195898761214c565b519020966121e3565b9550925050915061222a57565b60405162461bcd60e51b815260206004820152600f60248201526e141493d3d197d513d3d7d4d213d495608a1b6044820152606490fd5b6040519061226e82611388565b600060608360405161227f8161136d565b83815283602082015281528260208201528260408201520152565b156122a157565b60405162461bcd60e51b81526020600482015260116024820152700848288beae929c889eaebe988a9c8ea89607b1b6044820152606490fd5b6122fb906122e6612261565b506122f560018251511461229a565b51611fa9565b5190565b80519060078210156106f45760200151604051906020820192652b30b63ab29d60d11b845260f81b602683015260278201526027815261233e816113be565b51902090565b6020810151905160078110156106f45761239c57600160201b81101561236d5763ffffffff1690565b60405162461bcd60e51b81526020600482015260076024820152662120a22fa4999960c91b6044820152606490fd5b60405162461bcd60e51b81526020600482015260076024820152662727aa2fa4999960c91b6044820152606490fd5b600060206040516123db8161136d565b828152015263ffffffff604051916123f28361136d565b6000835216602082015290565b9060209160405161240f8161136d565b60009381858093520152519180602060405161242a8161136d565b82815201528251805160001993918482019182116124b3579061244c91611fb6565b519284515190810190811161249f57612464906124c7565b915b8251811015612499578061247e612494928751611fb6565b516124898286611fb6565b526108c38185611fb6565b612466565b50925290565b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b84526011600452602484fd5b906124d182611496565b6040906124e0825191826113f4565b83815280936124f1601f1991611496565b0191600090815b848110612506575050505050565b60209082516125148161136d565b8481528285818301528287010152016124f8565b518051519160019283810180911161070a57612543906124c7565b926000815b612564575b5050815151612560916108e58286611fb6565b5052565b83518051821015612599579061257d8161259393611fb6565b516125888288611fb6565b526108c38187611fb6565b81612548565b5061254d56fea264697066735822122025b91e789cd52ec932819d5c122aae267fde8a780fa03321f9acf96d7fbf860164736f6c63430008130033";

type OneStepProver0ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OneStepProver0ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OneStepProver0__factory extends ContractFactory {
  constructor(...args: OneStepProver0ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OneStepProver0> {
    return super.deploy(overrides || {}) as Promise<OneStepProver0>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OneStepProver0 {
    return super.attach(address) as OneStepProver0;
  }
  override connect(signer: Signer): OneStepProver0__factory {
    return super.connect(signer) as OneStepProver0__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OneStepProver0Interface {
    return new utils.Interface(_abi) as OneStepProver0Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OneStepProver0 {
    return new Contract(address, _abi, signerOrProvider) as OneStepProver0;
  }
}
