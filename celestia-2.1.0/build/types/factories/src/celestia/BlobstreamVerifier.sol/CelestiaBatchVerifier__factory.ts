/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  CelestiaBatchVerifier,
  CelestiaBatchVerifierInterface,
} from "../../../../src/celestia/BlobstreamVerifier.sol/CelestiaBatchVerifier";

const _abi = [
  {
    inputs: [],
    name: "InvalidProof",
    type: "error",
  },
  {
    inputs: [],
    name: "MismatchedHeights",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_blobstream",
        type: "address",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "bytes1",
                name: "version",
                type: "bytes1",
              },
              {
                internalType: "bytes28",
                name: "id",
                type: "bytes28",
              },
            ],
            internalType: "struct Namespace",
            name: "min",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bytes1",
                name: "version",
                type: "bytes1",
              },
              {
                internalType: "bytes28",
                name: "id",
                type: "bytes28",
              },
            ],
            internalType: "struct Namespace",
            name: "max",
            type: "tuple",
          },
          {
            internalType: "bytes32",
            name: "digest",
            type: "bytes32",
          },
        ],
        internalType: "struct NamespaceNode",
        name: "_rowRoot",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bytes32[]",
            name: "sideNodes",
            type: "bytes32[]",
          },
          {
            internalType: "uint256",
            name: "key",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "numLeaves",
            type: "uint256",
          },
        ],
        internalType: "struct BinaryMerkleProof",
        name: "_rowProof",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "tupleRootNonce",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "height",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "dataRoot",
                type: "bytes32",
              },
            ],
            internalType: "struct DataRootTuple",
            name: "tuple",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bytes32[]",
                name: "sideNodes",
                type: "bytes32[]",
              },
              {
                internalType: "uint256",
                name: "key",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "numLeaves",
                type: "uint256",
              },
            ],
            internalType: "struct BinaryMerkleProof",
            name: "proof",
            type: "tuple",
          },
        ],
        internalType: "struct AttestationProof",
        name: "_attestationProof",
        type: "tuple",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "isValid",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "proofHeight",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "proofDataRoot",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bytes32[]",
            name: "sideNodes",
            type: "bytes32[]",
          },
          {
            internalType: "uint256",
            name: "key",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "numLeaves",
            type: "uint256",
          },
        ],
        internalType: "struct BinaryMerkleProof",
        name: "rowProof",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001a57610a7b9081610020823930815050f35b600080fdfe60806040818152600436101561001457600080fd5b600090813560e01c63d5a784cd1461002b57600080fd5b61010090600319828136011261022c576004356001600160a01b0381169490859003610229576023199136830160a0811261022557849061006b89610230565b126102215783519661007c88610261565b6001600160f81b0319602435818116810361021d5789526044359863ffffffff1990818b168b036102195760209a8b82015283528660631936011261021d578651916100c783610261565b6064359081168103610219578252608435908116810361021d57818a01528189015260a435858201526001600160401b039660c43588811161021d576101119036906004016102d1565b9460e435908982116102195760808236039586011261021957879081519561013887610230565b83600401358752011261021d578651986101518a610261565b60248201358a5260448201358b8b01528a8501998a526064820135908111610219579161018a6101ac95949260048995369201016102d1565b8885015285888c8282519161019e83610230565b606083528201520152610377565b509451868151910151908451961515875287870152838601526080606086015260e085018683519560606080890152865180935287019501915b81811061020557505050839481015160a0850152015160c08301520390f35b8251865294870194918701916001016101e6565b8580fd5b8480fd5b5080fd5b8280fd5b80fd5b8380fd5b606081019081106001600160401b0382111761024b57604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761024b57604052565b608081019081106001600160401b0382111761024b57604052565b601f909101601f19168101906001600160401b0382119082101761024b57604052565b6001600160401b03811161024b5760051b60200190565b91909160608184031261037257604051906102eb82610230565b909283919081356001600160401b0381116103725782019080601f830112156103725781359061031a826102ba565b916103286040519384610297565b808352602093848085019260051b820101928311610372578401905b8282106103635750505083528082013590830152604090810135910152565b81358152908401908401610344565b600080fd5b9291909180519060208092818301966040885194015183604051958694631f3302a960e01b8652600486015280516024860152015160448401526080606484015260e483019080519160606084860152825180915285610104860193019060005b818110610479575050508481015160a48501526040015160c48401528290039082906001600160a01b03165afa90811561046d57600091610437575b501561042b576104279351015191610492565b9091565b50505050600090600490565b8281813d8311610466575b61044c8183610297565b810103126102215751908115158203610229575038610414565b503d610442565b6040513d6000823e3d90fd5b82518552899789975094850194909201916001016103d8565b906104e2926104a183516104f8565b60406104b060208601516104f8565b940151906040519462ffffff19809216602087015216603d850152605a840152605a83526104dd8361027c565b610581565b50156104f057600190600090565b600090600390565b80516020918201516040516001600160f81b031990921692820192835263ffffffff19166021820152601d815261052e81610261565b51905162ffffff19918282169190601d811061054c575b5050905090565b83919250601d0360031b1b1616803880610545565b6006111561056b57565b634e487b7160e01b600052602160045260246000fd5b6040820180519394936001811161067a575082515161066d575b602083019081518151111561065f5760206105ce966105e86040516105dc8160009b8c95868884015260218301906109dc565b03601f198101835282610297565b604051918280926109dc565b039060025afa1561065457855193519182511561063d579061060f939491519051906107ce565b600681101561062957806106235750149190565b92915050565b634e487b7160e01b85526021600452602485fd5b505160011415905061064e57149190565b50508190565b6040513d87823e3d90fd5b505050509050600090600290565b5050509050600090600190565b61068b8451519160208601516106ed565b1461059b575050509050600090600190565b906101009182039182116106ad57565b634e487b7160e01b600052601160045260246000fd5b6000198101919082116106ad57565b919082039182116106ad57565b60010190816001116106ad57565b906001908181111561079c5760005b8183821b1061077b576101009081039081116106ad5761071b9061069d565b9282610726856106c3565b1b90610731826106c3565b811161073e575050505090565b92935090918382036107505750505090565b61076f93509061076381610769936106d2565b926106d2565b906106ed565b610778906106df565b90565b828101809111156106fc57634e487b7160e01b600052601160045260246000fd5b505050600090565b80518210156107b85760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b93929381156108b557600182146108a05784511561089557826107f0836108c0565b6108036107fd88516106c3565b88610913565b928181106108605781610763610823969361081d936106d2565b906107ce565b909161082e82610561565b8161085957505061084d836108476108539495516106c3565b906107a4565b51610a07565b90600090565b9350919050565b61086a94506107ce565b909161087582610561565b8161085957505061088e836108476108539495516106c3565b5190610a07565b505090915090600590565b50509091516108af5790600090565b90600490565b505090915090600390565b600180821061037257600082805b6108f1575060001981019081116106ad5781901b9182146108ed575090565b1c90565b906108fb90610904565b90821c806108ce565b60001981146106ad5760010190565b91908251811161097f57610926816102ba565b906109346040519283610297565b808252601f19610943826102ba565b0136602084013760005b81811061095b575090925050565b8061096961097a92876107a4565b5161097482866107a4565b52610904565b61094d565b60405162461bcd60e51b815260206004820152602f60248201527f496e76616c69642072616e67653a205f626567696e206f72205f656e6420617260448201526e65206f7574206f6620626f756e647360881b6064820152608490fd5b9081519160005b8381106109f4575050016000815290565b80602080928401015181850152016109e3565b610a3460009160209360405191600160f81b8684015260218301526041820152604181526105dc8161027c565b039060025afa1561046d576000519056fea264697066735822122002f50930cebafd368d2c544c8d926a3c52ed14d92fca1fb9fb5faab565f85e2164736f6c63430008130033";

type CelestiaBatchVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CelestiaBatchVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CelestiaBatchVerifier__factory extends ContractFactory {
  constructor(...args: CelestiaBatchVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CelestiaBatchVerifier> {
    return super.deploy(overrides || {}) as Promise<CelestiaBatchVerifier>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CelestiaBatchVerifier {
    return super.attach(address) as CelestiaBatchVerifier;
  }
  override connect(signer: Signer): CelestiaBatchVerifier__factory {
    return super.connect(signer) as CelestiaBatchVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CelestiaBatchVerifierInterface {
    return new utils.Interface(_abi) as CelestiaBatchVerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CelestiaBatchVerifier {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CelestiaBatchVerifier;
  }
}
