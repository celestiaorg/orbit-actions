/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ArbWasmInterface extends utils.Interface {
  functions: {
    "activateProgram(address)": FunctionFragment;
    "blockCacheSize()": FunctionFragment;
    "codehashAsmSize(bytes32)": FunctionFragment;
    "codehashKeepalive(bytes32)": FunctionFragment;
    "codehashVersion(bytes32)": FunctionFragment;
    "expiryDays()": FunctionFragment;
    "freePages()": FunctionFragment;
    "initCostScalar()": FunctionFragment;
    "inkPrice()": FunctionFragment;
    "keepaliveDays()": FunctionFragment;
    "maxStackDepth()": FunctionFragment;
    "minInitGas()": FunctionFragment;
    "pageGas()": FunctionFragment;
    "pageLimit()": FunctionFragment;
    "pageRamp()": FunctionFragment;
    "programInitGas(address)": FunctionFragment;
    "programMemoryFootprint(address)": FunctionFragment;
    "programTimeLeft(address)": FunctionFragment;
    "programVersion(address)": FunctionFragment;
    "stylusVersion()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activateProgram"
      | "blockCacheSize"
      | "codehashAsmSize"
      | "codehashKeepalive"
      | "codehashVersion"
      | "expiryDays"
      | "freePages"
      | "initCostScalar"
      | "inkPrice"
      | "keepaliveDays"
      | "maxStackDepth"
      | "minInitGas"
      | "pageGas"
      | "pageLimit"
      | "pageRamp"
      | "programInitGas"
      | "programMemoryFootprint"
      | "programTimeLeft"
      | "programVersion"
      | "stylusVersion"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activateProgram",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "blockCacheSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "codehashAsmSize",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "codehashKeepalive",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "codehashVersion",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "expiryDays",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "freePages", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initCostScalar",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "inkPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "keepaliveDays",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxStackDepth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minInitGas",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pageGas", values?: undefined): string;
  encodeFunctionData(functionFragment: "pageLimit", values?: undefined): string;
  encodeFunctionData(functionFragment: "pageRamp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "programInitGas",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "programMemoryFootprint",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "programTimeLeft",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "programVersion",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stylusVersion",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activateProgram",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockCacheSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "codehashAsmSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "codehashKeepalive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "codehashVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expiryDays", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "freePages", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initCostScalar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "inkPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "keepaliveDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxStackDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minInitGas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pageGas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pageLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pageRamp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "programInitGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "programMemoryFootprint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "programTimeLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "programVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stylusVersion",
    data: BytesLike
  ): Result;

  events: {
    "ProgramActivated(bytes32,bytes32,address,uint256,uint16)": EventFragment;
    "ProgramLifetimeExtended(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProgramActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProgramLifetimeExtended"): EventFragment;
}

export interface ProgramActivatedEventObject {
  codehash: string;
  moduleHash: string;
  program: string;
  dataFee: BigNumber;
  version: number;
}
export type ProgramActivatedEvent = TypedEvent<
  [string, string, string, BigNumber, number],
  ProgramActivatedEventObject
>;

export type ProgramActivatedEventFilter =
  TypedEventFilter<ProgramActivatedEvent>;

export interface ProgramLifetimeExtendedEventObject {
  codehash: string;
  dataFee: BigNumber;
}
export type ProgramLifetimeExtendedEvent = TypedEvent<
  [string, BigNumber],
  ProgramLifetimeExtendedEventObject
>;

export type ProgramLifetimeExtendedEventFilter =
  TypedEventFilter<ProgramLifetimeExtendedEvent>;

export interface ArbWasm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArbWasmInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateProgram(
      program: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    blockCacheSize(
      overrides?: CallOverrides
    ): Promise<[number] & { count: number }>;

    codehashAsmSize(
      codehash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number] & { size: number }>;

    codehashKeepalive(
      codehash: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    codehashVersion(
      codehash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number] & { version: number }>;

    expiryDays(
      overrides?: CallOverrides
    ): Promise<[number] & { _days: number }>;

    freePages(overrides?: CallOverrides): Promise<[number] & { pages: number }>;

    initCostScalar(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { percent: BigNumber }>;

    inkPrice(overrides?: CallOverrides): Promise<[number] & { price: number }>;

    keepaliveDays(
      overrides?: CallOverrides
    ): Promise<[number] & { _days: number }>;

    maxStackDepth(
      overrides?: CallOverrides
    ): Promise<[number] & { depth: number }>;

    minInitGas(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { gas: BigNumber; cached: BigNumber }>;

    pageGas(overrides?: CallOverrides): Promise<[number] & { gas: number }>;

    pageLimit(overrides?: CallOverrides): Promise<[number] & { limit: number }>;

    pageRamp(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ramp: BigNumber }>;

    programInitGas(
      program: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { gas: BigNumber; gasWhenCached: BigNumber }
    >;

    programMemoryFootprint(
      program: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number] & { footprint: number }>;

    programTimeLeft(
      program: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _secs: BigNumber }>;

    programVersion(
      program: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number] & { version: number }>;

    stylusVersion(
      overrides?: CallOverrides
    ): Promise<[number] & { version: number }>;
  };

  activateProgram(
    program: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  blockCacheSize(overrides?: CallOverrides): Promise<number>;

  codehashAsmSize(
    codehash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  codehashKeepalive(
    codehash: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  codehashVersion(
    codehash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  expiryDays(overrides?: CallOverrides): Promise<number>;

  freePages(overrides?: CallOverrides): Promise<number>;

  initCostScalar(overrides?: CallOverrides): Promise<BigNumber>;

  inkPrice(overrides?: CallOverrides): Promise<number>;

  keepaliveDays(overrides?: CallOverrides): Promise<number>;

  maxStackDepth(overrides?: CallOverrides): Promise<number>;

  minInitGas(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { gas: BigNumber; cached: BigNumber }>;

  pageGas(overrides?: CallOverrides): Promise<number>;

  pageLimit(overrides?: CallOverrides): Promise<number>;

  pageRamp(overrides?: CallOverrides): Promise<BigNumber>;

  programInitGas(
    program: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { gas: BigNumber; gasWhenCached: BigNumber }
  >;

  programMemoryFootprint(
    program: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  programTimeLeft(
    program: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  programVersion(
    program: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  stylusVersion(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    activateProgram(
      program: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { version: number; dataFee: BigNumber }>;

    blockCacheSize(overrides?: CallOverrides): Promise<number>;

    codehashAsmSize(
      codehash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    codehashKeepalive(
      codehash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    codehashVersion(
      codehash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    expiryDays(overrides?: CallOverrides): Promise<number>;

    freePages(overrides?: CallOverrides): Promise<number>;

    initCostScalar(overrides?: CallOverrides): Promise<BigNumber>;

    inkPrice(overrides?: CallOverrides): Promise<number>;

    keepaliveDays(overrides?: CallOverrides): Promise<number>;

    maxStackDepth(overrides?: CallOverrides): Promise<number>;

    minInitGas(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { gas: BigNumber; cached: BigNumber }>;

    pageGas(overrides?: CallOverrides): Promise<number>;

    pageLimit(overrides?: CallOverrides): Promise<number>;

    pageRamp(overrides?: CallOverrides): Promise<BigNumber>;

    programInitGas(
      program: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { gas: BigNumber; gasWhenCached: BigNumber }
    >;

    programMemoryFootprint(
      program: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    programTimeLeft(
      program: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    programVersion(
      program: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    stylusVersion(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "ProgramActivated(bytes32,bytes32,address,uint256,uint16)"(
      codehash?: PromiseOrValue<BytesLike> | null,
      moduleHash?: null,
      program?: null,
      dataFee?: null,
      version?: null
    ): ProgramActivatedEventFilter;
    ProgramActivated(
      codehash?: PromiseOrValue<BytesLike> | null,
      moduleHash?: null,
      program?: null,
      dataFee?: null,
      version?: null
    ): ProgramActivatedEventFilter;

    "ProgramLifetimeExtended(bytes32,uint256)"(
      codehash?: PromiseOrValue<BytesLike> | null,
      dataFee?: null
    ): ProgramLifetimeExtendedEventFilter;
    ProgramLifetimeExtended(
      codehash?: PromiseOrValue<BytesLike> | null,
      dataFee?: null
    ): ProgramLifetimeExtendedEventFilter;
  };

  estimateGas: {
    activateProgram(
      program: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    blockCacheSize(overrides?: CallOverrides): Promise<BigNumber>;

    codehashAsmSize(
      codehash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    codehashKeepalive(
      codehash: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    codehashVersion(
      codehash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expiryDays(overrides?: CallOverrides): Promise<BigNumber>;

    freePages(overrides?: CallOverrides): Promise<BigNumber>;

    initCostScalar(overrides?: CallOverrides): Promise<BigNumber>;

    inkPrice(overrides?: CallOverrides): Promise<BigNumber>;

    keepaliveDays(overrides?: CallOverrides): Promise<BigNumber>;

    maxStackDepth(overrides?: CallOverrides): Promise<BigNumber>;

    minInitGas(overrides?: CallOverrides): Promise<BigNumber>;

    pageGas(overrides?: CallOverrides): Promise<BigNumber>;

    pageLimit(overrides?: CallOverrides): Promise<BigNumber>;

    pageRamp(overrides?: CallOverrides): Promise<BigNumber>;

    programInitGas(
      program: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    programMemoryFootprint(
      program: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    programTimeLeft(
      program: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    programVersion(
      program: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stylusVersion(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activateProgram(
      program: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    blockCacheSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    codehashAsmSize(
      codehash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    codehashKeepalive(
      codehash: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    codehashVersion(
      codehash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expiryDays(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    freePages(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initCostScalar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inkPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keepaliveDays(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxStackDepth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minInitGas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pageGas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pageLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pageRamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    programInitGas(
      program: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    programMemoryFootprint(
      program: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    programTimeLeft(
      program: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    programVersion(
      program: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stylusVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
