/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ArbOwnerInterface extends utils.Interface {
  functions: {
    "addChainOwner(address)": FunctionFragment;
    "addWasmCacheManager(address)": FunctionFragment;
    "getAllChainOwners()": FunctionFragment;
    "getInfraFeeAccount()": FunctionFragment;
    "getNetworkFeeAccount()": FunctionFragment;
    "isChainOwner(address)": FunctionFragment;
    "releaseL1PricerSurplusFunds(uint256)": FunctionFragment;
    "removeChainOwner(address)": FunctionFragment;
    "removeWasmCacheManager(address)": FunctionFragment;
    "scheduleArbOSUpgrade(uint64,uint64)": FunctionFragment;
    "setAmortizedCostCapBips(uint64)": FunctionFragment;
    "setBrotliCompressionLevel(uint64)": FunctionFragment;
    "setChainConfig(string)": FunctionFragment;
    "setInfraFeeAccount(address)": FunctionFragment;
    "setInkPrice(uint32)": FunctionFragment;
    "setL1BaseFeeEstimateInertia(uint64)": FunctionFragment;
    "setL1PricePerUnit(uint256)": FunctionFragment;
    "setL1PricingEquilibrationUnits(uint256)": FunctionFragment;
    "setL1PricingInertia(uint64)": FunctionFragment;
    "setL1PricingRewardRate(uint64)": FunctionFragment;
    "setL1PricingRewardRecipient(address)": FunctionFragment;
    "setL2BaseFee(uint256)": FunctionFragment;
    "setL2GasBacklogTolerance(uint64)": FunctionFragment;
    "setL2GasPricingInertia(uint64)": FunctionFragment;
    "setMaxTxGasLimit(uint64)": FunctionFragment;
    "setMinimumL2BaseFee(uint256)": FunctionFragment;
    "setNetworkFeeAccount(address)": FunctionFragment;
    "setPerBatchGasCharge(int64)": FunctionFragment;
    "setSpeedLimit(uint64)": FunctionFragment;
    "setWasmBlockCacheSize(uint16)": FunctionFragment;
    "setWasmExpiryDays(uint16)": FunctionFragment;
    "setWasmFreePages(uint16)": FunctionFragment;
    "setWasmInitCostScalar(uint64)": FunctionFragment;
    "setWasmKeepaliveDays(uint16)": FunctionFragment;
    "setWasmMaxStackDepth(uint32)": FunctionFragment;
    "setWasmMinInitGas(uint8,uint16)": FunctionFragment;
    "setWasmPageGas(uint16)": FunctionFragment;
    "setWasmPageLimit(uint16)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addChainOwner"
      | "addWasmCacheManager"
      | "getAllChainOwners"
      | "getInfraFeeAccount"
      | "getNetworkFeeAccount"
      | "isChainOwner"
      | "releaseL1PricerSurplusFunds"
      | "removeChainOwner"
      | "removeWasmCacheManager"
      | "scheduleArbOSUpgrade"
      | "setAmortizedCostCapBips"
      | "setBrotliCompressionLevel"
      | "setChainConfig"
      | "setInfraFeeAccount"
      | "setInkPrice"
      | "setL1BaseFeeEstimateInertia"
      | "setL1PricePerUnit"
      | "setL1PricingEquilibrationUnits"
      | "setL1PricingInertia"
      | "setL1PricingRewardRate"
      | "setL1PricingRewardRecipient"
      | "setL2BaseFee"
      | "setL2GasBacklogTolerance"
      | "setL2GasPricingInertia"
      | "setMaxTxGasLimit"
      | "setMinimumL2BaseFee"
      | "setNetworkFeeAccount"
      | "setPerBatchGasCharge"
      | "setSpeedLimit"
      | "setWasmBlockCacheSize"
      | "setWasmExpiryDays"
      | "setWasmFreePages"
      | "setWasmInitCostScalar"
      | "setWasmKeepaliveDays"
      | "setWasmMaxStackDepth"
      | "setWasmMinInitGas"
      | "setWasmPageGas"
      | "setWasmPageLimit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addChainOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addWasmCacheManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllChainOwners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInfraFeeAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetworkFeeAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isChainOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseL1PricerSurplusFunds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeChainOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWasmCacheManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleArbOSUpgrade",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAmortizedCostCapBips",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBrotliCompressionLevel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainConfig",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInfraFeeAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInkPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setL1BaseFeeEstimateInertia",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setL1PricePerUnit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setL1PricingEquilibrationUnits",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setL1PricingInertia",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setL1PricingRewardRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setL1PricingRewardRecipient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setL2BaseFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setL2GasBacklogTolerance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setL2GasPricingInertia",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTxGasLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumL2BaseFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNetworkFeeAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerBatchGasCharge",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpeedLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWasmBlockCacheSize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWasmExpiryDays",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWasmFreePages",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWasmInitCostScalar",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWasmKeepaliveDays",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWasmMaxStackDepth",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWasmMinInitGas",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWasmPageGas",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWasmPageLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addChainOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWasmCacheManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllChainOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInfraFeeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkFeeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isChainOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseL1PricerSurplusFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeChainOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWasmCacheManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleArbOSUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAmortizedCostCapBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBrotliCompressionLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInfraFeeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInkPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL1BaseFeeEstimateInertia",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL1PricePerUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL1PricingEquilibrationUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL1PricingInertia",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL1PricingRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL1PricingRewardRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL2BaseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL2GasBacklogTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL2GasPricingInertia",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTxGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumL2BaseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNetworkFeeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerBatchGasCharge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpeedLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWasmBlockCacheSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWasmExpiryDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWasmFreePages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWasmInitCostScalar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWasmKeepaliveDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWasmMaxStackDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWasmMinInitGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWasmPageGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWasmPageLimit",
    data: BytesLike
  ): Result;

  events: {
    "OwnerActs(bytes4,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerActs"): EventFragment;
}

export interface OwnerActsEventObject {
  method: string;
  owner: string;
  data: string;
}
export type OwnerActsEvent = TypedEvent<
  [string, string, string],
  OwnerActsEventObject
>;

export type OwnerActsEventFilter = TypedEventFilter<OwnerActsEvent>;

export interface ArbOwner extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArbOwnerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addChainOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addWasmCacheManager(
      manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllChainOwners(overrides?: CallOverrides): Promise<[string[]]>;

    getInfraFeeAccount(overrides?: CallOverrides): Promise<[string]>;

    getNetworkFeeAccount(overrides?: CallOverrides): Promise<[string]>;

    isChainOwner(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    releaseL1PricerSurplusFunds(
      maxWeiToRelease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeChainOwner(
      ownerToRemove: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeWasmCacheManager(
      manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    scheduleArbOSUpgrade(
      newVersion: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAmortizedCostCapBips(
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBrotliCompressionLevel(
      level: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setChainConfig(
      chainConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInfraFeeAccount(
      newInfraFeeAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInkPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setL1BaseFeeEstimateInertia(
      inertia: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setL1PricePerUnit(
      pricePerUnit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setL1PricingEquilibrationUnits(
      equilibrationUnits: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setL1PricingInertia(
      inertia: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setL1PricingRewardRate(
      weiPerUnit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setL1PricingRewardRecipient(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setL2BaseFee(
      priceInWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setL2GasBacklogTolerance(
      sec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setL2GasPricingInertia(
      sec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxTxGasLimit(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumL2BaseFee(
      priceInWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNetworkFeeAccount(
      newNetworkFeeAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPerBatchGasCharge(
      cost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpeedLimit(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWasmBlockCacheSize(
      count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWasmExpiryDays(
      _days: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWasmFreePages(
      pages: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWasmInitCostScalar(
      percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWasmKeepaliveDays(
      _days: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWasmMaxStackDepth(
      depth: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWasmMinInitGas(
      gas: PromiseOrValue<BigNumberish>,
      cached: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWasmPageGas(
      gas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWasmPageLimit(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addChainOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addWasmCacheManager(
    manager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllChainOwners(overrides?: CallOverrides): Promise<string[]>;

  getInfraFeeAccount(overrides?: CallOverrides): Promise<string>;

  getNetworkFeeAccount(overrides?: CallOverrides): Promise<string>;

  isChainOwner(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  releaseL1PricerSurplusFunds(
    maxWeiToRelease: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeChainOwner(
    ownerToRemove: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeWasmCacheManager(
    manager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  scheduleArbOSUpgrade(
    newVersion: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAmortizedCostCapBips(
    cap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBrotliCompressionLevel(
    level: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setChainConfig(
    chainConfig: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInfraFeeAccount(
    newInfraFeeAccount: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInkPrice(
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setL1BaseFeeEstimateInertia(
    inertia: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setL1PricePerUnit(
    pricePerUnit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setL1PricingEquilibrationUnits(
    equilibrationUnits: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setL1PricingInertia(
    inertia: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setL1PricingRewardRate(
    weiPerUnit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setL1PricingRewardRecipient(
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setL2BaseFee(
    priceInWei: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setL2GasBacklogTolerance(
    sec: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setL2GasPricingInertia(
    sec: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxTxGasLimit(
    limit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinimumL2BaseFee(
    priceInWei: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNetworkFeeAccount(
    newNetworkFeeAccount: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPerBatchGasCharge(
    cost: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpeedLimit(
    limit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWasmBlockCacheSize(
    count: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWasmExpiryDays(
    _days: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWasmFreePages(
    pages: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWasmInitCostScalar(
    percent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWasmKeepaliveDays(
    _days: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWasmMaxStackDepth(
    depth: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWasmMinInitGas(
    gas: PromiseOrValue<BigNumberish>,
    cached: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWasmPageGas(
    gas: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWasmPageLimit(
    limit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addChainOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addWasmCacheManager(
      manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllChainOwners(overrides?: CallOverrides): Promise<string[]>;

    getInfraFeeAccount(overrides?: CallOverrides): Promise<string>;

    getNetworkFeeAccount(overrides?: CallOverrides): Promise<string>;

    isChainOwner(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    releaseL1PricerSurplusFunds(
      maxWeiToRelease: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeChainOwner(
      ownerToRemove: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeWasmCacheManager(
      manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    scheduleArbOSUpgrade(
      newVersion: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAmortizedCostCapBips(
      cap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBrotliCompressionLevel(
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setChainConfig(
      chainConfig: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInfraFeeAccount(
      newInfraFeeAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInkPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setL1BaseFeeEstimateInertia(
      inertia: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setL1PricePerUnit(
      pricePerUnit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setL1PricingEquilibrationUnits(
      equilibrationUnits: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setL1PricingInertia(
      inertia: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setL1PricingRewardRate(
      weiPerUnit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setL1PricingRewardRecipient(
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setL2BaseFee(
      priceInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setL2GasBacklogTolerance(
      sec: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setL2GasPricingInertia(
      sec: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTxGasLimit(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumL2BaseFee(
      priceInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNetworkFeeAccount(
      newNetworkFeeAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerBatchGasCharge(
      cost: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpeedLimit(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWasmBlockCacheSize(
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWasmExpiryDays(
      _days: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWasmFreePages(
      pages: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWasmInitCostScalar(
      percent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWasmKeepaliveDays(
      _days: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWasmMaxStackDepth(
      depth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWasmMinInitGas(
      gas: PromiseOrValue<BigNumberish>,
      cached: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWasmPageGas(
      gas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWasmPageLimit(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnerActs(bytes4,address,bytes)"(
      method?: PromiseOrValue<BytesLike> | null,
      owner?: PromiseOrValue<string> | null,
      data?: null
    ): OwnerActsEventFilter;
    OwnerActs(
      method?: PromiseOrValue<BytesLike> | null,
      owner?: PromiseOrValue<string> | null,
      data?: null
    ): OwnerActsEventFilter;
  };

  estimateGas: {
    addChainOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addWasmCacheManager(
      manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllChainOwners(overrides?: CallOverrides): Promise<BigNumber>;

    getInfraFeeAccount(overrides?: CallOverrides): Promise<BigNumber>;

    getNetworkFeeAccount(overrides?: CallOverrides): Promise<BigNumber>;

    isChainOwner(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseL1PricerSurplusFunds(
      maxWeiToRelease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeChainOwner(
      ownerToRemove: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeWasmCacheManager(
      manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    scheduleArbOSUpgrade(
      newVersion: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAmortizedCostCapBips(
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBrotliCompressionLevel(
      level: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setChainConfig(
      chainConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInfraFeeAccount(
      newInfraFeeAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInkPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setL1BaseFeeEstimateInertia(
      inertia: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setL1PricePerUnit(
      pricePerUnit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setL1PricingEquilibrationUnits(
      equilibrationUnits: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setL1PricingInertia(
      inertia: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setL1PricingRewardRate(
      weiPerUnit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setL1PricingRewardRecipient(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setL2BaseFee(
      priceInWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setL2GasBacklogTolerance(
      sec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setL2GasPricingInertia(
      sec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxTxGasLimit(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinimumL2BaseFee(
      priceInWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNetworkFeeAccount(
      newNetworkFeeAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPerBatchGasCharge(
      cost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpeedLimit(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWasmBlockCacheSize(
      count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWasmExpiryDays(
      _days: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWasmFreePages(
      pages: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWasmInitCostScalar(
      percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWasmKeepaliveDays(
      _days: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWasmMaxStackDepth(
      depth: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWasmMinInitGas(
      gas: PromiseOrValue<BigNumberish>,
      cached: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWasmPageGas(
      gas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWasmPageLimit(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addChainOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addWasmCacheManager(
      manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllChainOwners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInfraFeeAccount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNetworkFeeAccount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isChainOwner(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releaseL1PricerSurplusFunds(
      maxWeiToRelease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeChainOwner(
      ownerToRemove: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeWasmCacheManager(
      manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    scheduleArbOSUpgrade(
      newVersion: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAmortizedCostCapBips(
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBrotliCompressionLevel(
      level: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setChainConfig(
      chainConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInfraFeeAccount(
      newInfraFeeAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInkPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setL1BaseFeeEstimateInertia(
      inertia: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setL1PricePerUnit(
      pricePerUnit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setL1PricingEquilibrationUnits(
      equilibrationUnits: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setL1PricingInertia(
      inertia: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setL1PricingRewardRate(
      weiPerUnit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setL1PricingRewardRecipient(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setL2BaseFee(
      priceInWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setL2GasBacklogTolerance(
      sec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setL2GasPricingInertia(
      sec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTxGasLimit(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumL2BaseFee(
      priceInWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNetworkFeeAccount(
      newNetworkFeeAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPerBatchGasCharge(
      cost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpeedLimit(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWasmBlockCacheSize(
      count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWasmExpiryDays(
      _days: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWasmFreePages(
      pages: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWasmInitCostScalar(
      percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWasmKeepaliveDays(
      _days: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWasmMaxStackDepth(
      depth: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWasmMinInitGas(
      gas: PromiseOrValue<BigNumberish>,
      cached: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWasmPageGas(
      gas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWasmPageLimit(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
