/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace CacheManager {
  export type EntryStruct = {
    code: PromiseOrValue<BytesLike>;
    size: PromiseOrValue<BigNumberish>;
    bid: PromiseOrValue<BigNumberish>;
  };

  export type EntryStructOutput = [string, BigNumber, BigNumber] & {
    code: string;
    size: BigNumber;
    bid: BigNumber;
  };
}

export interface CacheManagerInterface extends utils.Interface {
  functions: {
    "cacheSize()": FunctionFragment;
    "decay()": FunctionFragment;
    "entries(uint256)": FunctionFragment;
    "evictAll()": FunctionFragment;
    "evictPrograms(uint256)": FunctionFragment;
    "getEntries()": FunctionFragment;
    "getMinBid(address)": FunctionFragment;
    "getMinBid(bytes32)": FunctionFragment;
    "getMinBid(uint64)": FunctionFragment;
    "getSmallestEntries(uint256)": FunctionFragment;
    "initialize(uint64,uint64)": FunctionFragment;
    "isPaused()": FunctionFragment;
    "makeSpace(uint64)": FunctionFragment;
    "paused()": FunctionFragment;
    "placeBid(address)": FunctionFragment;
    "queueSize()": FunctionFragment;
    "setCacheSize(uint64)": FunctionFragment;
    "setDecayRate(uint64)": FunctionFragment;
    "sweepFunds()": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cacheSize"
      | "decay"
      | "entries"
      | "evictAll"
      | "evictPrograms"
      | "getEntries"
      | "getMinBid(address)"
      | "getMinBid(bytes32)"
      | "getMinBid(uint64)"
      | "getSmallestEntries"
      | "initialize"
      | "isPaused"
      | "makeSpace"
      | "paused"
      | "placeBid"
      | "queueSize"
      | "setCacheSize"
      | "setDecayRate"
      | "sweepFunds"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "cacheSize", values?: undefined): string;
  encodeFunctionData(functionFragment: "decay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "entries",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "evictAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "evictPrograms",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntries",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinBid(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinBid(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinBid(uint64)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSmallestEntries",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "makeSpace",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "queueSize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setCacheSize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDecayRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepFunds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "cacheSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "entries", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "evictAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "evictPrograms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEntries", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinBid(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinBid(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinBid(uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSmallestEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeSpace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queueSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCacheSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDecayRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweepFunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "DeleteBid(bytes32,uint192,uint64)": EventFragment;
    "InsertBid(bytes32,address,uint192,uint64)": EventFragment;
    "Pause()": EventFragment;
    "SetCacheSize(uint64)": EventFragment;
    "SetDecayRate(uint64)": EventFragment;
    "Unpause()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeleteBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InsertBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCacheSize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDecayRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpause"): EventFragment;
}

export interface DeleteBidEventObject {
  codehash: string;
  bid: BigNumber;
  size: BigNumber;
}
export type DeleteBidEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DeleteBidEventObject
>;

export type DeleteBidEventFilter = TypedEventFilter<DeleteBidEvent>;

export interface InsertBidEventObject {
  codehash: string;
  program: string;
  bid: BigNumber;
  size: BigNumber;
}
export type InsertBidEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  InsertBidEventObject
>;

export type InsertBidEventFilter = TypedEventFilter<InsertBidEvent>;

export interface PauseEventObject {}
export type PauseEvent = TypedEvent<[], PauseEventObject>;

export type PauseEventFilter = TypedEventFilter<PauseEvent>;

export interface SetCacheSizeEventObject {
  size: BigNumber;
}
export type SetCacheSizeEvent = TypedEvent<
  [BigNumber],
  SetCacheSizeEventObject
>;

export type SetCacheSizeEventFilter = TypedEventFilter<SetCacheSizeEvent>;

export interface SetDecayRateEventObject {
  decay: BigNumber;
}
export type SetDecayRateEvent = TypedEvent<
  [BigNumber],
  SetDecayRateEventObject
>;

export type SetDecayRateEventFilter = TypedEventFilter<SetDecayRateEvent>;

export interface UnpauseEventObject {}
export type UnpauseEvent = TypedEvent<[], UnpauseEventObject>;

export type UnpauseEventFilter = TypedEventFilter<UnpauseEvent>;

export interface CacheManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CacheManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cacheSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    decay(overrides?: CallOverrides): Promise<[BigNumber]>;

    entries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        code: string;
        size: BigNumber;
        bid: BigNumber;
      }
    >;

    evictAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    evictPrograms(
      count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getEntries(
      overrides?: CallOverrides
    ): Promise<[CacheManager.EntryStructOutput[]]>;

    "getMinBid(address)"(
      program: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { min: BigNumber }>;

    "getMinBid(bytes32)"(
      codehash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { min: BigNumber }>;

    "getMinBid(uint64)"(
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { min: BigNumber }>;

    getSmallestEntries(
      k: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [CacheManager.EntryStructOutput[]] & {
        result: CacheManager.EntryStructOutput[];
      }
    >;

    initialize(
      initCacheSize: PromiseOrValue<BigNumberish>,
      initDecay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isPaused(overrides?: CallOverrides): Promise<[boolean]>;

    makeSpace(
      size: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    placeBid(
      program: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    queueSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCacheSize(
      newSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDecayRate(
      newDecay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sweepFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  cacheSize(overrides?: CallOverrides): Promise<BigNumber>;

  decay(overrides?: CallOverrides): Promise<BigNumber>;

  entries(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      code: string;
      size: BigNumber;
      bid: BigNumber;
    }
  >;

  evictAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  evictPrograms(
    count: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getEntries(
    overrides?: CallOverrides
  ): Promise<CacheManager.EntryStructOutput[]>;

  "getMinBid(address)"(
    program: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMinBid(bytes32)"(
    codehash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMinBid(uint64)"(
    size: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSmallestEntries(
    k: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<CacheManager.EntryStructOutput[]>;

  initialize(
    initCacheSize: PromiseOrValue<BigNumberish>,
    initDecay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isPaused(overrides?: CallOverrides): Promise<boolean>;

  makeSpace(
    size: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  placeBid(
    program: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  queueSize(overrides?: CallOverrides): Promise<BigNumber>;

  setCacheSize(
    newSize: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDecayRate(
    newDecay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sweepFunds(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cacheSize(overrides?: CallOverrides): Promise<BigNumber>;

    decay(overrides?: CallOverrides): Promise<BigNumber>;

    entries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        code: string;
        size: BigNumber;
        bid: BigNumber;
      }
    >;

    evictAll(overrides?: CallOverrides): Promise<void>;

    evictPrograms(
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getEntries(
      overrides?: CallOverrides
    ): Promise<CacheManager.EntryStructOutput[]>;

    "getMinBid(address)"(
      program: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinBid(bytes32)"(
      codehash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinBid(uint64)"(
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSmallestEntries(
      k: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<CacheManager.EntryStructOutput[]>;

    initialize(
      initCacheSize: PromiseOrValue<BigNumberish>,
      initDecay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isPaused(overrides?: CallOverrides): Promise<boolean>;

    makeSpace(
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<void>;

    placeBid(
      program: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    queueSize(overrides?: CallOverrides): Promise<BigNumber>;

    setCacheSize(
      newSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDecayRate(
      newDecay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sweepFunds(overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DeleteBid(bytes32,uint192,uint64)"(
      codehash?: PromiseOrValue<BytesLike> | null,
      bid?: null,
      size?: null
    ): DeleteBidEventFilter;
    DeleteBid(
      codehash?: PromiseOrValue<BytesLike> | null,
      bid?: null,
      size?: null
    ): DeleteBidEventFilter;

    "InsertBid(bytes32,address,uint192,uint64)"(
      codehash?: PromiseOrValue<BytesLike> | null,
      program?: null,
      bid?: null,
      size?: null
    ): InsertBidEventFilter;
    InsertBid(
      codehash?: PromiseOrValue<BytesLike> | null,
      program?: null,
      bid?: null,
      size?: null
    ): InsertBidEventFilter;

    "Pause()"(): PauseEventFilter;
    Pause(): PauseEventFilter;

    "SetCacheSize(uint64)"(size?: null): SetCacheSizeEventFilter;
    SetCacheSize(size?: null): SetCacheSizeEventFilter;

    "SetDecayRate(uint64)"(decay?: null): SetDecayRateEventFilter;
    SetDecayRate(decay?: null): SetDecayRateEventFilter;

    "Unpause()"(): UnpauseEventFilter;
    Unpause(): UnpauseEventFilter;
  };

  estimateGas: {
    cacheSize(overrides?: CallOverrides): Promise<BigNumber>;

    decay(overrides?: CallOverrides): Promise<BigNumber>;

    entries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    evictAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    evictPrograms(
      count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getEntries(overrides?: CallOverrides): Promise<BigNumber>;

    "getMinBid(address)"(
      program: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinBid(bytes32)"(
      codehash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinBid(uint64)"(
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSmallestEntries(
      k: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      initCacheSize: PromiseOrValue<BigNumberish>,
      initDecay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isPaused(overrides?: CallOverrides): Promise<BigNumber>;

    makeSpace(
      size: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    placeBid(
      program: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    queueSize(overrides?: CallOverrides): Promise<BigNumber>;

    setCacheSize(
      newSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDecayRate(
      newDecay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sweepFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cacheSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    entries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    evictAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    evictPrograms(
      count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getEntries(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMinBid(address)"(
      program: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinBid(bytes32)"(
      codehash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinBid(uint64)"(
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSmallestEntries(
      k: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      initCacheSize: PromiseOrValue<BigNumberish>,
      initDecay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makeSpace(
      size: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    placeBid(
      program: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    queueSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCacheSize(
      newSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDecayRate(
      newDecay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sweepFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
