/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ISequencerInbox {
  export type MaxTimeVariationStruct = {
    delayBlocks: PromiseOrValue<BigNumberish>;
    futureBlocks: PromiseOrValue<BigNumberish>;
    delaySeconds: PromiseOrValue<BigNumberish>;
    futureSeconds: PromiseOrValue<BigNumberish>;
  };

  export type MaxTimeVariationStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    delayBlocks: BigNumber;
    futureBlocks: BigNumber;
    delaySeconds: BigNumber;
    futureSeconds: BigNumber;
  };
}

export declare namespace IBridge {
  export type TimeBoundsStruct = {
    minTimestamp: PromiseOrValue<BigNumberish>;
    maxTimestamp: PromiseOrValue<BigNumberish>;
    minBlockNumber: PromiseOrValue<BigNumberish>;
    maxBlockNumber: PromiseOrValue<BigNumberish>;
  };

  export type TimeBoundsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    minTimestamp: BigNumber;
    maxTimestamp: BigNumber;
    minBlockNumber: BigNumber;
    maxBlockNumber: BigNumber;
  };
}

export interface SequencerInboxStubInterface extends utils.Interface {
  functions: {
    "BLOBSTREAM()": FunctionFragment;
    "BROTLI_MESSAGE_HEADER_FLAG()": FunctionFragment;
    "CELESTIA_MESSAGE_HEADER_FLAG()": FunctionFragment;
    "DAS_MESSAGE_HEADER_FLAG()": FunctionFragment;
    "DATA_AUTHENTICATED_FLAG()": FunctionFragment;
    "DATA_BLOB_HEADER_FLAG()": FunctionFragment;
    "HEADER_LENGTH()": FunctionFragment;
    "TREE_DAS_MESSAGE_HEADER_FLAG()": FunctionFragment;
    "ZERO_HEAVY_MESSAGE_HEADER_FLAG()": FunctionFragment;
    "addInitMessage(uint256)": FunctionFragment;
    "addSequencerL2Batch(uint256,bytes,uint256,address,uint256,uint256)": FunctionFragment;
    "addSequencerL2BatchFromBlobs(uint256,uint256,address,uint256,uint256)": FunctionFragment;
    "addSequencerL2BatchFromOrigin(uint256,bytes,uint256,address)": FunctionFragment;
    "addSequencerL2BatchFromOrigin(uint256,bytes,uint256,address,uint256,uint256)": FunctionFragment;
    "batchCount()": FunctionFragment;
    "batchPosterManager()": FunctionFragment;
    "bridge()": FunctionFragment;
    "dasKeySetInfo(bytes32)": FunctionFragment;
    "forceInclusion(uint256,uint8,uint64[2],uint256,address,bytes32)": FunctionFragment;
    "getKeysetCreationBlock(bytes32)": FunctionFragment;
    "inboxAccs(uint256)": FunctionFragment;
    "initialize(address,(uint256,uint256,uint256,uint256))": FunctionFragment;
    "invalidateKeysetHash(bytes32)": FunctionFragment;
    "isBatchPoster(address)": FunctionFragment;
    "isSequencer(address)": FunctionFragment;
    "isUsingFeeToken()": FunctionFragment;
    "isValidKeysetHash(bytes32)": FunctionFragment;
    "maxDataSize()": FunctionFragment;
    "maxTimeVariation()": FunctionFragment;
    "postUpgradeInit()": FunctionFragment;
    "reader4844()": FunctionFragment;
    "removeDelayAfterFork()": FunctionFragment;
    "rollup()": FunctionFragment;
    "setBatchPosterManager(address)": FunctionFragment;
    "setIsBatchPoster(address,bool)": FunctionFragment;
    "setIsSequencer(address,bool)": FunctionFragment;
    "setMaxTimeVariation((uint256,uint256,uint256,uint256))": FunctionFragment;
    "setValidKeyset(bytes)": FunctionFragment;
    "totalDelayedMessagesRead()": FunctionFragment;
    "updateRollupAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BLOBSTREAM"
      | "BROTLI_MESSAGE_HEADER_FLAG"
      | "CELESTIA_MESSAGE_HEADER_FLAG"
      | "DAS_MESSAGE_HEADER_FLAG"
      | "DATA_AUTHENTICATED_FLAG"
      | "DATA_BLOB_HEADER_FLAG"
      | "HEADER_LENGTH"
      | "TREE_DAS_MESSAGE_HEADER_FLAG"
      | "ZERO_HEAVY_MESSAGE_HEADER_FLAG"
      | "addInitMessage"
      | "addSequencerL2Batch"
      | "addSequencerL2BatchFromBlobs"
      | "addSequencerL2BatchFromOrigin(uint256,bytes,uint256,address)"
      | "addSequencerL2BatchFromOrigin(uint256,bytes,uint256,address,uint256,uint256)"
      | "batchCount"
      | "batchPosterManager"
      | "bridge"
      | "dasKeySetInfo"
      | "forceInclusion"
      | "getKeysetCreationBlock"
      | "inboxAccs"
      | "initialize"
      | "invalidateKeysetHash"
      | "isBatchPoster"
      | "isSequencer"
      | "isUsingFeeToken"
      | "isValidKeysetHash"
      | "maxDataSize"
      | "maxTimeVariation"
      | "postUpgradeInit"
      | "reader4844"
      | "removeDelayAfterFork"
      | "rollup"
      | "setBatchPosterManager"
      | "setIsBatchPoster"
      | "setIsSequencer"
      | "setMaxTimeVariation"
      | "setValidKeyset"
      | "totalDelayedMessagesRead"
      | "updateRollupAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BLOBSTREAM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BROTLI_MESSAGE_HEADER_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CELESTIA_MESSAGE_HEADER_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DAS_MESSAGE_HEADER_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DATA_AUTHENTICATED_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DATA_BLOB_HEADER_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HEADER_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TREE_DAS_MESSAGE_HEADER_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZERO_HEAVY_MESSAGE_HEADER_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addInitMessage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addSequencerL2Batch",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addSequencerL2BatchFromBlobs",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addSequencerL2BatchFromOrigin(uint256,bytes,uint256,address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addSequencerL2BatchFromOrigin(uint256,bytes,uint256,address,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchPosterManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dasKeySetInfo",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "forceInclusion",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getKeysetCreationBlock",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "inboxAccs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, ISequencerInbox.MaxTimeVariationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidateKeysetHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isBatchPoster",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSequencer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isUsingFeeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidKeysetHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDataSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTimeVariation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postUpgradeInit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reader4844",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeDelayAfterFork",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rollup", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBatchPosterManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsBatchPoster",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsSequencer",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTimeVariation",
    values: [ISequencerInbox.MaxTimeVariationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidKeyset",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDelayedMessagesRead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateRollupAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "BLOBSTREAM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BROTLI_MESSAGE_HEADER_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CELESTIA_MESSAGE_HEADER_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DAS_MESSAGE_HEADER_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DATA_AUTHENTICATED_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DATA_BLOB_HEADER_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HEADER_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TREE_DAS_MESSAGE_HEADER_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ZERO_HEAVY_MESSAGE_HEADER_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addInitMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSequencerL2Batch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSequencerL2BatchFromBlobs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSequencerL2BatchFromOrigin(uint256,bytes,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSequencerL2BatchFromOrigin(uint256,bytes,uint256,address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchPosterManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dasKeySetInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceInclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKeysetCreationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "inboxAccs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "invalidateKeysetHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBatchPoster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSequencer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUsingFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidKeysetHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDataSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTimeVariation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postUpgradeInit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reader4844", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeDelayAfterFork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rollup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBatchPosterManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsBatchPoster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsSequencer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTimeVariation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidKeyset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDelayedMessagesRead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRollupAddress",
    data: BytesLike
  ): Result;

  events: {
    "InboxMessageDelivered(uint256,bytes)": EventFragment;
    "InboxMessageDeliveredFromOrigin(uint256)": EventFragment;
    "InvalidateKeyset(bytes32)": EventFragment;
    "OwnerFunctionCalled(uint256)": EventFragment;
    "SequencerBatchData(uint256,bytes)": EventFragment;
    "SequencerBatchDelivered(uint256,bytes32,bytes32,bytes32,uint256,tuple,uint8)": EventFragment;
    "SetValidKeyset(bytes32,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InboxMessageDelivered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InboxMessageDeliveredFromOrigin"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InvalidateKeyset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerFunctionCalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SequencerBatchData"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SequencerBatchDelivered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetValidKeyset"): EventFragment;
}

export interface InboxMessageDeliveredEventObject {
  messageNum: BigNumber;
  data: string;
}
export type InboxMessageDeliveredEvent = TypedEvent<
  [BigNumber, string],
  InboxMessageDeliveredEventObject
>;

export type InboxMessageDeliveredEventFilter =
  TypedEventFilter<InboxMessageDeliveredEvent>;

export interface InboxMessageDeliveredFromOriginEventObject {
  messageNum: BigNumber;
}
export type InboxMessageDeliveredFromOriginEvent = TypedEvent<
  [BigNumber],
  InboxMessageDeliveredFromOriginEventObject
>;

export type InboxMessageDeliveredFromOriginEventFilter =
  TypedEventFilter<InboxMessageDeliveredFromOriginEvent>;

export interface InvalidateKeysetEventObject {
  keysetHash: string;
}
export type InvalidateKeysetEvent = TypedEvent<
  [string],
  InvalidateKeysetEventObject
>;

export type InvalidateKeysetEventFilter =
  TypedEventFilter<InvalidateKeysetEvent>;

export interface OwnerFunctionCalledEventObject {
  id: BigNumber;
}
export type OwnerFunctionCalledEvent = TypedEvent<
  [BigNumber],
  OwnerFunctionCalledEventObject
>;

export type OwnerFunctionCalledEventFilter =
  TypedEventFilter<OwnerFunctionCalledEvent>;

export interface SequencerBatchDataEventObject {
  batchSequenceNumber: BigNumber;
  data: string;
}
export type SequencerBatchDataEvent = TypedEvent<
  [BigNumber, string],
  SequencerBatchDataEventObject
>;

export type SequencerBatchDataEventFilter =
  TypedEventFilter<SequencerBatchDataEvent>;

export interface SequencerBatchDeliveredEventObject {
  batchSequenceNumber: BigNumber;
  beforeAcc: string;
  afterAcc: string;
  delayedAcc: string;
  afterDelayedMessagesRead: BigNumber;
  timeBounds: IBridge.TimeBoundsStructOutput;
  dataLocation: number;
}
export type SequencerBatchDeliveredEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    IBridge.TimeBoundsStructOutput,
    number
  ],
  SequencerBatchDeliveredEventObject
>;

export type SequencerBatchDeliveredEventFilter =
  TypedEventFilter<SequencerBatchDeliveredEvent>;

export interface SetValidKeysetEventObject {
  keysetHash: string;
  keysetBytes: string;
}
export type SetValidKeysetEvent = TypedEvent<
  [string, string],
  SetValidKeysetEventObject
>;

export type SetValidKeysetEventFilter = TypedEventFilter<SetValidKeysetEvent>;

export interface SequencerInboxStub extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SequencerInboxStubInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BLOBSTREAM(overrides?: CallOverrides): Promise<[string]>;

    BROTLI_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<[string]>;

    CELESTIA_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<[string]>;

    DAS_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<[string]>;

    DATA_AUTHENTICATED_FLAG(overrides?: CallOverrides): Promise<[string]>;

    DATA_BLOB_HEADER_FLAG(overrides?: CallOverrides): Promise<[string]>;

    HEADER_LENGTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    TREE_DAS_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<[string]>;

    ZERO_HEAVY_MESSAGE_HEADER_FLAG(
      overrides?: CallOverrides
    ): Promise<[string]>;

    addInitMessage(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSequencerL2Batch(
      sequenceNumber: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      afterDelayedMessagesRead: PromiseOrValue<BigNumberish>,
      gasRefunder: PromiseOrValue<string>,
      prevMessageCount: PromiseOrValue<BigNumberish>,
      newMessageCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSequencerL2BatchFromBlobs(
      sequenceNumber: PromiseOrValue<BigNumberish>,
      afterDelayedMessagesRead: PromiseOrValue<BigNumberish>,
      gasRefunder: PromiseOrValue<string>,
      prevMessageCount: PromiseOrValue<BigNumberish>,
      newMessageCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addSequencerL2BatchFromOrigin(uint256,bytes,uint256,address)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "addSequencerL2BatchFromOrigin(uint256,bytes,uint256,address,uint256,uint256)"(
      sequenceNumber: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      afterDelayedMessagesRead: PromiseOrValue<BigNumberish>,
      gasRefunder: PromiseOrValue<string>,
      prevMessageCount: PromiseOrValue<BigNumberish>,
      newMessageCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    batchPosterManager(overrides?: CallOverrides): Promise<[string]>;

    bridge(overrides?: CallOverrides): Promise<[string]>;

    dasKeySetInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        isValidKeyset: boolean;
        creationBlock: BigNumber;
      }
    >;

    forceInclusion(
      _totalDelayedMessagesRead: PromiseOrValue<BigNumberish>,
      kind: PromiseOrValue<BigNumberish>,
      l1BlockAndTime: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      baseFeeL1: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      messageDataHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getKeysetCreationBlock(
      ksHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    inboxAccs(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      bridge_: PromiseOrValue<string>,
      maxTimeVariation_: ISequencerInbox.MaxTimeVariationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    invalidateKeysetHash(
      ksHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isBatchPoster(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSequencer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isUsingFeeToken(overrides?: CallOverrides): Promise<[boolean]>;

    isValidKeysetHash(
      ksHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxDataSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTimeVariation(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    postUpgradeInit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reader4844(overrides?: CallOverrides): Promise<[string]>;

    removeDelayAfterFork(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rollup(overrides?: CallOverrides): Promise<[string]>;

    setBatchPosterManager(
      newBatchPosterManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsBatchPoster(
      addr: PromiseOrValue<string>,
      isBatchPoster_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsSequencer(
      addr: PromiseOrValue<string>,
      isSequencer_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxTimeVariation(
      maxTimeVariation_: ISequencerInbox.MaxTimeVariationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setValidKeyset(
      keysetBytes: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalDelayedMessagesRead(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateRollupAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BLOBSTREAM(overrides?: CallOverrides): Promise<string>;

  BROTLI_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<string>;

  CELESTIA_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<string>;

  DAS_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<string>;

  DATA_AUTHENTICATED_FLAG(overrides?: CallOverrides): Promise<string>;

  DATA_BLOB_HEADER_FLAG(overrides?: CallOverrides): Promise<string>;

  HEADER_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

  TREE_DAS_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<string>;

  ZERO_HEAVY_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<string>;

  addInitMessage(
    chainId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSequencerL2Batch(
    sequenceNumber: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    afterDelayedMessagesRead: PromiseOrValue<BigNumberish>,
    gasRefunder: PromiseOrValue<string>,
    prevMessageCount: PromiseOrValue<BigNumberish>,
    newMessageCount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSequencerL2BatchFromBlobs(
    sequenceNumber: PromiseOrValue<BigNumberish>,
    afterDelayedMessagesRead: PromiseOrValue<BigNumberish>,
    gasRefunder: PromiseOrValue<string>,
    prevMessageCount: PromiseOrValue<BigNumberish>,
    newMessageCount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addSequencerL2BatchFromOrigin(uint256,bytes,uint256,address)"(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BytesLike>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  "addSequencerL2BatchFromOrigin(uint256,bytes,uint256,address,uint256,uint256)"(
    sequenceNumber: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    afterDelayedMessagesRead: PromiseOrValue<BigNumberish>,
    gasRefunder: PromiseOrValue<string>,
    prevMessageCount: PromiseOrValue<BigNumberish>,
    newMessageCount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchCount(overrides?: CallOverrides): Promise<BigNumber>;

  batchPosterManager(overrides?: CallOverrides): Promise<string>;

  bridge(overrides?: CallOverrides): Promise<string>;

  dasKeySetInfo(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { isValidKeyset: boolean; creationBlock: BigNumber }
  >;

  forceInclusion(
    _totalDelayedMessagesRead: PromiseOrValue<BigNumberish>,
    kind: PromiseOrValue<BigNumberish>,
    l1BlockAndTime: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    baseFeeL1: PromiseOrValue<BigNumberish>,
    sender: PromiseOrValue<string>,
    messageDataHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getKeysetCreationBlock(
    ksHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  inboxAccs(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    bridge_: PromiseOrValue<string>,
    maxTimeVariation_: ISequencerInbox.MaxTimeVariationStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  invalidateKeysetHash(
    ksHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isBatchPoster(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSequencer(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isUsingFeeToken(overrides?: CallOverrides): Promise<boolean>;

  isValidKeysetHash(
    ksHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxDataSize(overrides?: CallOverrides): Promise<BigNumber>;

  maxTimeVariation(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  postUpgradeInit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reader4844(overrides?: CallOverrides): Promise<string>;

  removeDelayAfterFork(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rollup(overrides?: CallOverrides): Promise<string>;

  setBatchPosterManager(
    newBatchPosterManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsBatchPoster(
    addr: PromiseOrValue<string>,
    isBatchPoster_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsSequencer(
    addr: PromiseOrValue<string>,
    isSequencer_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxTimeVariation(
    maxTimeVariation_: ISequencerInbox.MaxTimeVariationStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setValidKeyset(
    keysetBytes: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalDelayedMessagesRead(overrides?: CallOverrides): Promise<BigNumber>;

  updateRollupAddress(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BLOBSTREAM(overrides?: CallOverrides): Promise<string>;

    BROTLI_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<string>;

    CELESTIA_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<string>;

    DAS_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<string>;

    DATA_AUTHENTICATED_FLAG(overrides?: CallOverrides): Promise<string>;

    DATA_BLOB_HEADER_FLAG(overrides?: CallOverrides): Promise<string>;

    HEADER_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    TREE_DAS_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<string>;

    ZERO_HEAVY_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<string>;

    addInitMessage(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addSequencerL2Batch(
      sequenceNumber: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      afterDelayedMessagesRead: PromiseOrValue<BigNumberish>,
      gasRefunder: PromiseOrValue<string>,
      prevMessageCount: PromiseOrValue<BigNumberish>,
      newMessageCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addSequencerL2BatchFromBlobs(
      sequenceNumber: PromiseOrValue<BigNumberish>,
      afterDelayedMessagesRead: PromiseOrValue<BigNumberish>,
      gasRefunder: PromiseOrValue<string>,
      prevMessageCount: PromiseOrValue<BigNumberish>,
      newMessageCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "addSequencerL2BatchFromOrigin(uint256,bytes,uint256,address)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "addSequencerL2BatchFromOrigin(uint256,bytes,uint256,address,uint256,uint256)"(
      sequenceNumber: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      afterDelayedMessagesRead: PromiseOrValue<BigNumberish>,
      gasRefunder: PromiseOrValue<string>,
      prevMessageCount: PromiseOrValue<BigNumberish>,
      newMessageCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    batchCount(overrides?: CallOverrides): Promise<BigNumber>;

    batchPosterManager(overrides?: CallOverrides): Promise<string>;

    bridge(overrides?: CallOverrides): Promise<string>;

    dasKeySetInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        isValidKeyset: boolean;
        creationBlock: BigNumber;
      }
    >;

    forceInclusion(
      _totalDelayedMessagesRead: PromiseOrValue<BigNumberish>,
      kind: PromiseOrValue<BigNumberish>,
      l1BlockAndTime: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      baseFeeL1: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      messageDataHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getKeysetCreationBlock(
      ksHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inboxAccs(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      bridge_: PromiseOrValue<string>,
      maxTimeVariation_: ISequencerInbox.MaxTimeVariationStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    invalidateKeysetHash(
      ksHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    isBatchPoster(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSequencer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isUsingFeeToken(overrides?: CallOverrides): Promise<boolean>;

    isValidKeysetHash(
      ksHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxDataSize(overrides?: CallOverrides): Promise<BigNumber>;

    maxTimeVariation(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    postUpgradeInit(overrides?: CallOverrides): Promise<void>;

    reader4844(overrides?: CallOverrides): Promise<string>;

    removeDelayAfterFork(overrides?: CallOverrides): Promise<void>;

    rollup(overrides?: CallOverrides): Promise<string>;

    setBatchPosterManager(
      newBatchPosterManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsBatchPoster(
      addr: PromiseOrValue<string>,
      isBatchPoster_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsSequencer(
      addr: PromiseOrValue<string>,
      isSequencer_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTimeVariation(
      maxTimeVariation_: ISequencerInbox.MaxTimeVariationStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidKeyset(
      keysetBytes: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalDelayedMessagesRead(overrides?: CallOverrides): Promise<BigNumber>;

    updateRollupAddress(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "InboxMessageDelivered(uint256,bytes)"(
      messageNum?: PromiseOrValue<BigNumberish> | null,
      data?: null
    ): InboxMessageDeliveredEventFilter;
    InboxMessageDelivered(
      messageNum?: PromiseOrValue<BigNumberish> | null,
      data?: null
    ): InboxMessageDeliveredEventFilter;

    "InboxMessageDeliveredFromOrigin(uint256)"(
      messageNum?: PromiseOrValue<BigNumberish> | null
    ): InboxMessageDeliveredFromOriginEventFilter;
    InboxMessageDeliveredFromOrigin(
      messageNum?: PromiseOrValue<BigNumberish> | null
    ): InboxMessageDeliveredFromOriginEventFilter;

    "InvalidateKeyset(bytes32)"(
      keysetHash?: PromiseOrValue<BytesLike> | null
    ): InvalidateKeysetEventFilter;
    InvalidateKeyset(
      keysetHash?: PromiseOrValue<BytesLike> | null
    ): InvalidateKeysetEventFilter;

    "OwnerFunctionCalled(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): OwnerFunctionCalledEventFilter;
    OwnerFunctionCalled(
      id?: PromiseOrValue<BigNumberish> | null
    ): OwnerFunctionCalledEventFilter;

    "SequencerBatchData(uint256,bytes)"(
      batchSequenceNumber?: PromiseOrValue<BigNumberish> | null,
      data?: null
    ): SequencerBatchDataEventFilter;
    SequencerBatchData(
      batchSequenceNumber?: PromiseOrValue<BigNumberish> | null,
      data?: null
    ): SequencerBatchDataEventFilter;

    "SequencerBatchDelivered(uint256,bytes32,bytes32,bytes32,uint256,tuple,uint8)"(
      batchSequenceNumber?: PromiseOrValue<BigNumberish> | null,
      beforeAcc?: PromiseOrValue<BytesLike> | null,
      afterAcc?: PromiseOrValue<BytesLike> | null,
      delayedAcc?: null,
      afterDelayedMessagesRead?: null,
      timeBounds?: null,
      dataLocation?: null
    ): SequencerBatchDeliveredEventFilter;
    SequencerBatchDelivered(
      batchSequenceNumber?: PromiseOrValue<BigNumberish> | null,
      beforeAcc?: PromiseOrValue<BytesLike> | null,
      afterAcc?: PromiseOrValue<BytesLike> | null,
      delayedAcc?: null,
      afterDelayedMessagesRead?: null,
      timeBounds?: null,
      dataLocation?: null
    ): SequencerBatchDeliveredEventFilter;

    "SetValidKeyset(bytes32,bytes)"(
      keysetHash?: PromiseOrValue<BytesLike> | null,
      keysetBytes?: null
    ): SetValidKeysetEventFilter;
    SetValidKeyset(
      keysetHash?: PromiseOrValue<BytesLike> | null,
      keysetBytes?: null
    ): SetValidKeysetEventFilter;
  };

  estimateGas: {
    BLOBSTREAM(overrides?: CallOverrides): Promise<BigNumber>;

    BROTLI_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    CELESTIA_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    DAS_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    DATA_AUTHENTICATED_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    DATA_BLOB_HEADER_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    HEADER_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    TREE_DAS_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    ZERO_HEAVY_MESSAGE_HEADER_FLAG(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addInitMessage(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSequencerL2Batch(
      sequenceNumber: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      afterDelayedMessagesRead: PromiseOrValue<BigNumberish>,
      gasRefunder: PromiseOrValue<string>,
      prevMessageCount: PromiseOrValue<BigNumberish>,
      newMessageCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSequencerL2BatchFromBlobs(
      sequenceNumber: PromiseOrValue<BigNumberish>,
      afterDelayedMessagesRead: PromiseOrValue<BigNumberish>,
      gasRefunder: PromiseOrValue<string>,
      prevMessageCount: PromiseOrValue<BigNumberish>,
      newMessageCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addSequencerL2BatchFromOrigin(uint256,bytes,uint256,address)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addSequencerL2BatchFromOrigin(uint256,bytes,uint256,address,uint256,uint256)"(
      sequenceNumber: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      afterDelayedMessagesRead: PromiseOrValue<BigNumberish>,
      gasRefunder: PromiseOrValue<string>,
      prevMessageCount: PromiseOrValue<BigNumberish>,
      newMessageCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchCount(overrides?: CallOverrides): Promise<BigNumber>;

    batchPosterManager(overrides?: CallOverrides): Promise<BigNumber>;

    bridge(overrides?: CallOverrides): Promise<BigNumber>;

    dasKeySetInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forceInclusion(
      _totalDelayedMessagesRead: PromiseOrValue<BigNumberish>,
      kind: PromiseOrValue<BigNumberish>,
      l1BlockAndTime: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      baseFeeL1: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      messageDataHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getKeysetCreationBlock(
      ksHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inboxAccs(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      bridge_: PromiseOrValue<string>,
      maxTimeVariation_: ISequencerInbox.MaxTimeVariationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    invalidateKeysetHash(
      ksHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isBatchPoster(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSequencer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUsingFeeToken(overrides?: CallOverrides): Promise<BigNumber>;

    isValidKeysetHash(
      ksHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxDataSize(overrides?: CallOverrides): Promise<BigNumber>;

    maxTimeVariation(overrides?: CallOverrides): Promise<BigNumber>;

    postUpgradeInit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reader4844(overrides?: CallOverrides): Promise<BigNumber>;

    removeDelayAfterFork(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rollup(overrides?: CallOverrides): Promise<BigNumber>;

    setBatchPosterManager(
      newBatchPosterManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsBatchPoster(
      addr: PromiseOrValue<string>,
      isBatchPoster_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsSequencer(
      addr: PromiseOrValue<string>,
      isSequencer_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxTimeVariation(
      maxTimeVariation_: ISequencerInbox.MaxTimeVariationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setValidKeyset(
      keysetBytes: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalDelayedMessagesRead(overrides?: CallOverrides): Promise<BigNumber>;

    updateRollupAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BLOBSTREAM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BROTLI_MESSAGE_HEADER_FLAG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CELESTIA_MESSAGE_HEADER_FLAG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DAS_MESSAGE_HEADER_FLAG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DATA_AUTHENTICATED_FLAG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DATA_BLOB_HEADER_FLAG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    HEADER_LENGTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TREE_DAS_MESSAGE_HEADER_FLAG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ZERO_HEAVY_MESSAGE_HEADER_FLAG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addInitMessage(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSequencerL2Batch(
      sequenceNumber: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      afterDelayedMessagesRead: PromiseOrValue<BigNumberish>,
      gasRefunder: PromiseOrValue<string>,
      prevMessageCount: PromiseOrValue<BigNumberish>,
      newMessageCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSequencerL2BatchFromBlobs(
      sequenceNumber: PromiseOrValue<BigNumberish>,
      afterDelayedMessagesRead: PromiseOrValue<BigNumberish>,
      gasRefunder: PromiseOrValue<string>,
      prevMessageCount: PromiseOrValue<BigNumberish>,
      newMessageCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addSequencerL2BatchFromOrigin(uint256,bytes,uint256,address)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addSequencerL2BatchFromOrigin(uint256,bytes,uint256,address,uint256,uint256)"(
      sequenceNumber: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      afterDelayedMessagesRead: PromiseOrValue<BigNumberish>,
      gasRefunder: PromiseOrValue<string>,
      prevMessageCount: PromiseOrValue<BigNumberish>,
      newMessageCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchPosterManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dasKeySetInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceInclusion(
      _totalDelayedMessagesRead: PromiseOrValue<BigNumberish>,
      kind: PromiseOrValue<BigNumberish>,
      l1BlockAndTime: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      baseFeeL1: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      messageDataHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getKeysetCreationBlock(
      ksHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inboxAccs(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      bridge_: PromiseOrValue<string>,
      maxTimeVariation_: ISequencerInbox.MaxTimeVariationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    invalidateKeysetHash(
      ksHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isBatchPoster(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSequencer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUsingFeeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidKeysetHash(
      ksHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxDataSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTimeVariation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postUpgradeInit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reader4844(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeDelayAfterFork(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rollup(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBatchPosterManager(
      newBatchPosterManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsBatchPoster(
      addr: PromiseOrValue<string>,
      isBatchPoster_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsSequencer(
      addr: PromiseOrValue<string>,
      isSequencer_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTimeVariation(
      maxTimeVariation_: ISequencerInbox.MaxTimeVariationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setValidKeyset(
      keysetBytes: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalDelayedMessagesRead(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateRollupAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
