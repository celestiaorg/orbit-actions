/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface MultiCallTestInterface extends utils.Interface {
  functions: {};

  events: {
    "Called(address,uint8,bool,bytes)": EventFragment;
    "Storage(bytes32,bytes32,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Called"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Storage"): EventFragment;
}

export interface CalledEventObject {
  addr: string;
  count: number;
  success: boolean;
  returnData: string;
}
export type CalledEvent = TypedEvent<
  [string, number, boolean, string],
  CalledEventObject
>;

export type CalledEventFilter = TypedEventFilter<CalledEvent>;

export interface StorageEventObject {
  slot: string;
  data: string;
  write: boolean;
}
export type StorageEvent = TypedEvent<
  [string, string, boolean],
  StorageEventObject
>;

export type StorageEventFilter = TypedEventFilter<StorageEvent>;

export interface MultiCallTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultiCallTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "Called(address,uint8,bool,bytes)"(
      addr?: null,
      count?: null,
      success?: null,
      returnData?: null
    ): CalledEventFilter;
    Called(
      addr?: null,
      count?: null,
      success?: null,
      returnData?: null
    ): CalledEventFilter;

    "Storage(bytes32,bytes32,bool)"(
      slot?: null,
      data?: null,
      write?: null
    ): StorageEventFilter;
    Storage(slot?: null, data?: null, write?: null): StorageEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
