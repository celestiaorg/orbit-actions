/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace BridgeCreator {
  export type BridgeContractsStruct = {
    bridge: PromiseOrValue<string>;
    sequencerInbox: PromiseOrValue<string>;
    inbox: PromiseOrValue<string>;
    rollupEventInbox: PromiseOrValue<string>;
    outbox: PromiseOrValue<string>;
  };

  export type BridgeContractsStructOutput = [
    string,
    string,
    string,
    string,
    string
  ] & {
    bridge: string;
    sequencerInbox: string;
    inbox: string;
    rollupEventInbox: string;
    outbox: string;
  };
}

export declare namespace ISequencerInbox {
  export type MaxTimeVariationStruct = {
    delayBlocks: PromiseOrValue<BigNumberish>;
    futureBlocks: PromiseOrValue<BigNumberish>;
    delaySeconds: PromiseOrValue<BigNumberish>;
    futureSeconds: PromiseOrValue<BigNumberish>;
  };

  export type MaxTimeVariationStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    delayBlocks: BigNumber;
    futureBlocks: BigNumber;
    delaySeconds: BigNumber;
    futureSeconds: BigNumber;
  };
}

export interface BridgeCreatorInterface extends utils.Interface {
  functions: {
    "createBridge(address,address,address,(uint256,uint256,uint256,uint256))": FunctionFragment;
    "erc20BasedTemplates()": FunctionFragment;
    "ethBasedTemplates()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateERC20Templates((address,address,address,address,address))": FunctionFragment;
    "updateTemplates((address,address,address,address,address))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createBridge"
      | "erc20BasedTemplates"
      | "ethBasedTemplates"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateERC20Templates"
      | "updateTemplates"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createBridge",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      ISequencerInbox.MaxTimeVariationStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20BasedTemplates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethBasedTemplates",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateERC20Templates",
    values: [BridgeCreator.BridgeContractsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTemplates",
    values: [BridgeCreator.BridgeContractsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "createBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20BasedTemplates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethBasedTemplates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateERC20Templates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTemplates",
    data: BytesLike
  ): Result;

  events: {
    "ERC20TemplatesUpdated()": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TemplatesUpdated()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ERC20TemplatesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TemplatesUpdated"): EventFragment;
}

export interface ERC20TemplatesUpdatedEventObject {}
export type ERC20TemplatesUpdatedEvent = TypedEvent<
  [],
  ERC20TemplatesUpdatedEventObject
>;

export type ERC20TemplatesUpdatedEventFilter =
  TypedEventFilter<ERC20TemplatesUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TemplatesUpdatedEventObject {}
export type TemplatesUpdatedEvent = TypedEvent<[], TemplatesUpdatedEventObject>;

export type TemplatesUpdatedEventFilter =
  TypedEventFilter<TemplatesUpdatedEvent>;

export interface BridgeCreator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeCreatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createBridge(
      adminProxy: PromiseOrValue<string>,
      rollup: PromiseOrValue<string>,
      nativeToken: PromiseOrValue<string>,
      maxTimeVariation: ISequencerInbox.MaxTimeVariationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    erc20BasedTemplates(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        bridge: string;
        sequencerInbox: string;
        inbox: string;
        rollupEventInbox: string;
        outbox: string;
      }
    >;

    ethBasedTemplates(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        bridge: string;
        sequencerInbox: string;
        inbox: string;
        rollupEventInbox: string;
        outbox: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateERC20Templates(
      _newTemplates: BridgeCreator.BridgeContractsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTemplates(
      _newTemplates: BridgeCreator.BridgeContractsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createBridge(
    adminProxy: PromiseOrValue<string>,
    rollup: PromiseOrValue<string>,
    nativeToken: PromiseOrValue<string>,
    maxTimeVariation: ISequencerInbox.MaxTimeVariationStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  erc20BasedTemplates(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string] & {
      bridge: string;
      sequencerInbox: string;
      inbox: string;
      rollupEventInbox: string;
      outbox: string;
    }
  >;

  ethBasedTemplates(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string] & {
      bridge: string;
      sequencerInbox: string;
      inbox: string;
      rollupEventInbox: string;
      outbox: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateERC20Templates(
    _newTemplates: BridgeCreator.BridgeContractsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTemplates(
    _newTemplates: BridgeCreator.BridgeContractsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createBridge(
      adminProxy: PromiseOrValue<string>,
      rollup: PromiseOrValue<string>,
      nativeToken: PromiseOrValue<string>,
      maxTimeVariation: ISequencerInbox.MaxTimeVariationStruct,
      overrides?: CallOverrides
    ): Promise<BridgeCreator.BridgeContractsStructOutput>;

    erc20BasedTemplates(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        bridge: string;
        sequencerInbox: string;
        inbox: string;
        rollupEventInbox: string;
        outbox: string;
      }
    >;

    ethBasedTemplates(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        bridge: string;
        sequencerInbox: string;
        inbox: string;
        rollupEventInbox: string;
        outbox: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateERC20Templates(
      _newTemplates: BridgeCreator.BridgeContractsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTemplates(
      _newTemplates: BridgeCreator.BridgeContractsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ERC20TemplatesUpdated()"(): ERC20TemplatesUpdatedEventFilter;
    ERC20TemplatesUpdated(): ERC20TemplatesUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "TemplatesUpdated()"(): TemplatesUpdatedEventFilter;
    TemplatesUpdated(): TemplatesUpdatedEventFilter;
  };

  estimateGas: {
    createBridge(
      adminProxy: PromiseOrValue<string>,
      rollup: PromiseOrValue<string>,
      nativeToken: PromiseOrValue<string>,
      maxTimeVariation: ISequencerInbox.MaxTimeVariationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    erc20BasedTemplates(overrides?: CallOverrides): Promise<BigNumber>;

    ethBasedTemplates(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateERC20Templates(
      _newTemplates: BridgeCreator.BridgeContractsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTemplates(
      _newTemplates: BridgeCreator.BridgeContractsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createBridge(
      adminProxy: PromiseOrValue<string>,
      rollup: PromiseOrValue<string>,
      nativeToken: PromiseOrValue<string>,
      maxTimeVariation: ISequencerInbox.MaxTimeVariationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    erc20BasedTemplates(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ethBasedTemplates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateERC20Templates(
      _newTemplates: BridgeCreator.BridgeContractsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTemplates(
      _newTemplates: BridgeCreator.BridgeContractsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
