/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type ConfigStruct = {
  confirmPeriodBlocks: PromiseOrValue<BigNumberish>;
  extraChallengeTimeBlocks: PromiseOrValue<BigNumberish>;
  stakeToken: PromiseOrValue<string>;
  baseStake: PromiseOrValue<BigNumberish>;
  wasmModuleRoot: PromiseOrValue<BytesLike>;
  owner: PromiseOrValue<string>;
  loserStakeEscrow: PromiseOrValue<string>;
  chainId: PromiseOrValue<BigNumberish>;
  chainConfig: PromiseOrValue<string>;
  genesisBlockNum: PromiseOrValue<BigNumberish>;
  sequencerInboxMaxTimeVariation: ISequencerInbox.MaxTimeVariationStruct;
};

export type ConfigStructOutput = [
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string,
  string,
  string,
  BigNumber,
  string,
  BigNumber,
  ISequencerInbox.MaxTimeVariationStructOutput
] & {
  confirmPeriodBlocks: BigNumber;
  extraChallengeTimeBlocks: BigNumber;
  stakeToken: string;
  baseStake: BigNumber;
  wasmModuleRoot: string;
  owner: string;
  loserStakeEscrow: string;
  chainId: BigNumber;
  chainConfig: string;
  genesisBlockNum: BigNumber;
  sequencerInboxMaxTimeVariation: ISequencerInbox.MaxTimeVariationStructOutput;
};

export type ContractDependenciesStruct = {
  bridge: PromiseOrValue<string>;
  sequencerInbox: PromiseOrValue<string>;
  inbox: PromiseOrValue<string>;
  outbox: PromiseOrValue<string>;
  rollupEventInbox: PromiseOrValue<string>;
  challengeManager: PromiseOrValue<string>;
  rollupAdminLogic: PromiseOrValue<string>;
  rollupUserLogic: PromiseOrValue<string>;
  validatorUtils: PromiseOrValue<string>;
  validatorWalletCreator: PromiseOrValue<string>;
};

export type ContractDependenciesStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string
] & {
  bridge: string;
  sequencerInbox: string;
  inbox: string;
  outbox: string;
  rollupEventInbox: string;
  challengeManager: string;
  rollupAdminLogic: string;
  rollupUserLogic: string;
  validatorUtils: string;
  validatorWalletCreator: string;
};

export declare namespace ISequencerInbox {
  export type MaxTimeVariationStruct = {
    delayBlocks: PromiseOrValue<BigNumberish>;
    futureBlocks: PromiseOrValue<BigNumberish>;
    delaySeconds: PromiseOrValue<BigNumberish>;
    futureSeconds: PromiseOrValue<BigNumberish>;
  };

  export type MaxTimeVariationStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    delayBlocks: BigNumber;
    futureBlocks: BigNumber;
    delaySeconds: BigNumber;
    futureSeconds: BigNumber;
  };
}

export interface RollupProxyInterface extends utils.Interface {
  functions: {
    "initializeProxy((uint64,uint64,address,uint256,bytes32,address,address,uint256,string,uint64,(uint256,uint256,uint256,uint256)),(address,address,address,address,address,address,address,address,address,address))": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "initializeProxy"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "initializeProxy",
    values: [ConfigStruct, ContractDependenciesStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "initializeProxy",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "UpgradedSecondary(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradedSecondary"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface UpgradedSecondaryEventObject {
  implementation: string;
}
export type UpgradedSecondaryEvent = TypedEvent<
  [string],
  UpgradedSecondaryEventObject
>;

export type UpgradedSecondaryEventFilter =
  TypedEventFilter<UpgradedSecondaryEvent>;

export interface RollupProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RollupProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    initializeProxy(
      config: ConfigStruct,
      connectedContracts: ContractDependenciesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  initializeProxy(
    config: ConfigStruct,
    connectedContracts: ContractDependenciesStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    initializeProxy(
      config: ConfigStruct,
      connectedContracts: ContractDependenciesStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "UpgradedSecondary(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedSecondaryEventFilter;
    UpgradedSecondary(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedSecondaryEventFilter;
  };

  estimateGas: {
    initializeProxy(
      config: ConfigStruct,
      connectedContracts: ContractDependenciesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    initializeProxy(
      config: ConfigStruct,
      connectedContracts: ContractDependenciesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
