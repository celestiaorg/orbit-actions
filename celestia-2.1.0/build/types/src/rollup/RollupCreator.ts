/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type ConfigStruct = {
  confirmPeriodBlocks: PromiseOrValue<BigNumberish>;
  extraChallengeTimeBlocks: PromiseOrValue<BigNumberish>;
  stakeToken: PromiseOrValue<string>;
  baseStake: PromiseOrValue<BigNumberish>;
  wasmModuleRoot: PromiseOrValue<BytesLike>;
  owner: PromiseOrValue<string>;
  loserStakeEscrow: PromiseOrValue<string>;
  chainId: PromiseOrValue<BigNumberish>;
  chainConfig: PromiseOrValue<string>;
  genesisBlockNum: PromiseOrValue<BigNumberish>;
  sequencerInboxMaxTimeVariation: ISequencerInbox.MaxTimeVariationStruct;
};

export type ConfigStructOutput = [
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string,
  string,
  string,
  BigNumber,
  string,
  BigNumber,
  ISequencerInbox.MaxTimeVariationStructOutput
] & {
  confirmPeriodBlocks: BigNumber;
  extraChallengeTimeBlocks: BigNumber;
  stakeToken: string;
  baseStake: BigNumber;
  wasmModuleRoot: string;
  owner: string;
  loserStakeEscrow: string;
  chainId: BigNumber;
  chainConfig: string;
  genesisBlockNum: BigNumber;
  sequencerInboxMaxTimeVariation: ISequencerInbox.MaxTimeVariationStructOutput;
};

export declare namespace ISequencerInbox {
  export type MaxTimeVariationStruct = {
    delayBlocks: PromiseOrValue<BigNumberish>;
    futureBlocks: PromiseOrValue<BigNumberish>;
    delaySeconds: PromiseOrValue<BigNumberish>;
    futureSeconds: PromiseOrValue<BigNumberish>;
  };

  export type MaxTimeVariationStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    delayBlocks: BigNumber;
    futureBlocks: BigNumber;
    delaySeconds: BigNumber;
    futureSeconds: BigNumber;
  };
}

export declare namespace RollupCreator {
  export type RollupDeploymentParamsStruct = {
    config: ConfigStruct;
    validators: PromiseOrValue<string>[];
    maxDataSize: PromiseOrValue<BigNumberish>;
    nativeToken: PromiseOrValue<string>;
    deployFactoriesToL2: PromiseOrValue<boolean>;
    maxFeePerGasForRetryables: PromiseOrValue<BigNumberish>;
    batchPosters: PromiseOrValue<string>[];
    batchPosterManager: PromiseOrValue<string>;
  };

  export type RollupDeploymentParamsStructOutput = [
    ConfigStructOutput,
    string[],
    BigNumber,
    string,
    boolean,
    BigNumber,
    string[],
    string
  ] & {
    config: ConfigStructOutput;
    validators: string[];
    maxDataSize: BigNumber;
    nativeToken: string;
    deployFactoriesToL2: boolean;
    maxFeePerGasForRetryables: BigNumber;
    batchPosters: string[];
    batchPosterManager: string;
  };
}

export interface RollupCreatorInterface extends utils.Interface {
  functions: {
    "bridgeCreator()": FunctionFragment;
    "challengeManagerTemplate()": FunctionFragment;
    "createRollup(((uint64,uint64,address,uint256,bytes32,address,address,uint256,string,uint64,(uint256,uint256,uint256,uint256)),address[],uint256,address,bool,uint256,address[],address))": FunctionFragment;
    "l2FactoriesDeployer()": FunctionFragment;
    "osp()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rollupAdminLogic()": FunctionFragment;
    "rollupUserLogic()": FunctionFragment;
    "setTemplates(address,address,address,address,address,address,address,address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeExecutorLogic()": FunctionFragment;
    "validatorUtils()": FunctionFragment;
    "validatorWalletCreator()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bridgeCreator"
      | "challengeManagerTemplate"
      | "createRollup"
      | "l2FactoriesDeployer"
      | "osp"
      | "owner"
      | "renounceOwnership"
      | "rollupAdminLogic"
      | "rollupUserLogic"
      | "setTemplates"
      | "transferOwnership"
      | "upgradeExecutorLogic"
      | "validatorUtils"
      | "validatorWalletCreator"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bridgeCreator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challengeManagerTemplate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createRollup",
    values: [RollupCreator.RollupDeploymentParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "l2FactoriesDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "osp", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rollupAdminLogic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rollupUserLogic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTemplates",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeExecutorLogic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validatorUtils",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validatorWalletCreator",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "bridgeCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeManagerTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRollup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2FactoriesDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "osp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollupAdminLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollupUserLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTemplates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeExecutorLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorUtils",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorWalletCreator",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RollupCreated(address,address,address,address,address,address,address,address,address,address,address,address)": EventFragment;
    "TemplatesUpdated()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RollupCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TemplatesUpdated"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RollupCreatedEventObject {
  rollupAddress: string;
  nativeToken: string;
  inboxAddress: string;
  outbox: string;
  rollupEventInbox: string;
  challengeManager: string;
  adminProxy: string;
  sequencerInbox: string;
  bridge: string;
  upgradeExecutor: string;
  validatorUtils: string;
  validatorWalletCreator: string;
}
export type RollupCreatedEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ],
  RollupCreatedEventObject
>;

export type RollupCreatedEventFilter = TypedEventFilter<RollupCreatedEvent>;

export interface TemplatesUpdatedEventObject {}
export type TemplatesUpdatedEvent = TypedEvent<[], TemplatesUpdatedEventObject>;

export type TemplatesUpdatedEventFilter =
  TypedEventFilter<TemplatesUpdatedEvent>;

export interface RollupCreator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RollupCreatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bridgeCreator(overrides?: CallOverrides): Promise<[string]>;

    challengeManagerTemplate(overrides?: CallOverrides): Promise<[string]>;

    createRollup(
      deployParams: RollupCreator.RollupDeploymentParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    l2FactoriesDeployer(overrides?: CallOverrides): Promise<[string]>;

    osp(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rollupAdminLogic(overrides?: CallOverrides): Promise<[string]>;

    rollupUserLogic(overrides?: CallOverrides): Promise<[string]>;

    setTemplates(
      _bridgeCreator: PromiseOrValue<string>,
      _osp: PromiseOrValue<string>,
      _challengeManagerLogic: PromiseOrValue<string>,
      _rollupAdminLogic: PromiseOrValue<string>,
      _rollupUserLogic: PromiseOrValue<string>,
      _upgradeExecutorLogic: PromiseOrValue<string>,
      _validatorUtils: PromiseOrValue<string>,
      _validatorWalletCreator: PromiseOrValue<string>,
      _l2FactoriesDeployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeExecutorLogic(overrides?: CallOverrides): Promise<[string]>;

    validatorUtils(overrides?: CallOverrides): Promise<[string]>;

    validatorWalletCreator(overrides?: CallOverrides): Promise<[string]>;
  };

  bridgeCreator(overrides?: CallOverrides): Promise<string>;

  challengeManagerTemplate(overrides?: CallOverrides): Promise<string>;

  createRollup(
    deployParams: RollupCreator.RollupDeploymentParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  l2FactoriesDeployer(overrides?: CallOverrides): Promise<string>;

  osp(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rollupAdminLogic(overrides?: CallOverrides): Promise<string>;

  rollupUserLogic(overrides?: CallOverrides): Promise<string>;

  setTemplates(
    _bridgeCreator: PromiseOrValue<string>,
    _osp: PromiseOrValue<string>,
    _challengeManagerLogic: PromiseOrValue<string>,
    _rollupAdminLogic: PromiseOrValue<string>,
    _rollupUserLogic: PromiseOrValue<string>,
    _upgradeExecutorLogic: PromiseOrValue<string>,
    _validatorUtils: PromiseOrValue<string>,
    _validatorWalletCreator: PromiseOrValue<string>,
    _l2FactoriesDeployer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeExecutorLogic(overrides?: CallOverrides): Promise<string>;

  validatorUtils(overrides?: CallOverrides): Promise<string>;

  validatorWalletCreator(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    bridgeCreator(overrides?: CallOverrides): Promise<string>;

    challengeManagerTemplate(overrides?: CallOverrides): Promise<string>;

    createRollup(
      deployParams: RollupCreator.RollupDeploymentParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    l2FactoriesDeployer(overrides?: CallOverrides): Promise<string>;

    osp(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rollupAdminLogic(overrides?: CallOverrides): Promise<string>;

    rollupUserLogic(overrides?: CallOverrides): Promise<string>;

    setTemplates(
      _bridgeCreator: PromiseOrValue<string>,
      _osp: PromiseOrValue<string>,
      _challengeManagerLogic: PromiseOrValue<string>,
      _rollupAdminLogic: PromiseOrValue<string>,
      _rollupUserLogic: PromiseOrValue<string>,
      _upgradeExecutorLogic: PromiseOrValue<string>,
      _validatorUtils: PromiseOrValue<string>,
      _validatorWalletCreator: PromiseOrValue<string>,
      _l2FactoriesDeployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeExecutorLogic(overrides?: CallOverrides): Promise<string>;

    validatorUtils(overrides?: CallOverrides): Promise<string>;

    validatorWalletCreator(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RollupCreated(address,address,address,address,address,address,address,address,address,address,address,address)"(
      rollupAddress?: PromiseOrValue<string> | null,
      nativeToken?: PromiseOrValue<string> | null,
      inboxAddress?: null,
      outbox?: null,
      rollupEventInbox?: null,
      challengeManager?: null,
      adminProxy?: null,
      sequencerInbox?: null,
      bridge?: null,
      upgradeExecutor?: null,
      validatorUtils?: null,
      validatorWalletCreator?: null
    ): RollupCreatedEventFilter;
    RollupCreated(
      rollupAddress?: PromiseOrValue<string> | null,
      nativeToken?: PromiseOrValue<string> | null,
      inboxAddress?: null,
      outbox?: null,
      rollupEventInbox?: null,
      challengeManager?: null,
      adminProxy?: null,
      sequencerInbox?: null,
      bridge?: null,
      upgradeExecutor?: null,
      validatorUtils?: null,
      validatorWalletCreator?: null
    ): RollupCreatedEventFilter;

    "TemplatesUpdated()"(): TemplatesUpdatedEventFilter;
    TemplatesUpdated(): TemplatesUpdatedEventFilter;
  };

  estimateGas: {
    bridgeCreator(overrides?: CallOverrides): Promise<BigNumber>;

    challengeManagerTemplate(overrides?: CallOverrides): Promise<BigNumber>;

    createRollup(
      deployParams: RollupCreator.RollupDeploymentParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    l2FactoriesDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    osp(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rollupAdminLogic(overrides?: CallOverrides): Promise<BigNumber>;

    rollupUserLogic(overrides?: CallOverrides): Promise<BigNumber>;

    setTemplates(
      _bridgeCreator: PromiseOrValue<string>,
      _osp: PromiseOrValue<string>,
      _challengeManagerLogic: PromiseOrValue<string>,
      _rollupAdminLogic: PromiseOrValue<string>,
      _rollupUserLogic: PromiseOrValue<string>,
      _upgradeExecutorLogic: PromiseOrValue<string>,
      _validatorUtils: PromiseOrValue<string>,
      _validatorWalletCreator: PromiseOrValue<string>,
      _l2FactoriesDeployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeExecutorLogic(overrides?: CallOverrides): Promise<BigNumber>;

    validatorUtils(overrides?: CallOverrides): Promise<BigNumber>;

    validatorWalletCreator(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bridgeCreator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    challengeManagerTemplate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createRollup(
      deployParams: RollupCreator.RollupDeploymentParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    l2FactoriesDeployer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    osp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rollupAdminLogic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rollupUserLogic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setTemplates(
      _bridgeCreator: PromiseOrValue<string>,
      _osp: PromiseOrValue<string>,
      _challengeManagerLogic: PromiseOrValue<string>,
      _rollupAdminLogic: PromiseOrValue<string>,
      _rollupUserLogic: PromiseOrValue<string>,
      _upgradeExecutorLogic: PromiseOrValue<string>,
      _validatorUtils: PromiseOrValue<string>,
      _validatorWalletCreator: PromiseOrValue<string>,
      _l2FactoriesDeployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeExecutorLogic(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorUtils(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validatorWalletCreator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
