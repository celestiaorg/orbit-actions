/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type NodeStruct = {
  stateHash: PromiseOrValue<BytesLike>;
  challengeHash: PromiseOrValue<BytesLike>;
  confirmData: PromiseOrValue<BytesLike>;
  prevNum: PromiseOrValue<BigNumberish>;
  deadlineBlock: PromiseOrValue<BigNumberish>;
  noChildConfirmedBeforeBlock: PromiseOrValue<BigNumberish>;
  stakerCount: PromiseOrValue<BigNumberish>;
  childStakerCount: PromiseOrValue<BigNumberish>;
  firstChildBlock: PromiseOrValue<BigNumberish>;
  latestChildNumber: PromiseOrValue<BigNumberish>;
  createdAtBlock: PromiseOrValue<BigNumberish>;
  nodeHash: PromiseOrValue<BytesLike>;
};

export type NodeStructOutput = [
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  stateHash: string;
  challengeHash: string;
  confirmData: string;
  prevNum: BigNumber;
  deadlineBlock: BigNumber;
  noChildConfirmedBeforeBlock: BigNumber;
  stakerCount: BigNumber;
  childStakerCount: BigNumber;
  firstChildBlock: BigNumber;
  latestChildNumber: BigNumber;
  createdAtBlock: BigNumber;
  nodeHash: string;
};

export declare namespace ValidatorUtils {
  export type NodeConflictStruct = {
    ty: PromiseOrValue<BigNumberish>;
    node1: PromiseOrValue<BigNumberish>;
    node2: PromiseOrValue<BigNumberish>;
  };

  export type NodeConflictStructOutput = [number, BigNumber, BigNumber] & {
    ty: number;
    node1: BigNumber;
    node2: BigNumber;
  };
}

export interface ValidatorUtilsInterface extends utils.Interface {
  functions: {
    "areUnresolvedNodesLinear(address)": FunctionFragment;
    "checkDecidableNextNode(address)": FunctionFragment;
    "findNodeConflict(address,uint64,uint64,uint256)": FunctionFragment;
    "findStakerConflict(address,address,address,uint256)": FunctionFragment;
    "getStakers(address,uint64,uint64)": FunctionFragment;
    "latestStaked(address,address)": FunctionFragment;
    "refundableStakers(address)": FunctionFragment;
    "requireConfirmable(address)": FunctionFragment;
    "requireRejectable(address)": FunctionFragment;
    "stakedNodes(address,address)": FunctionFragment;
    "timedOutChallenges(address,uint64,uint64)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "areUnresolvedNodesLinear"
      | "checkDecidableNextNode"
      | "findNodeConflict"
      | "findStakerConflict"
      | "getStakers"
      | "latestStaked"
      | "refundableStakers"
      | "requireConfirmable"
      | "requireRejectable"
      | "stakedNodes"
      | "timedOutChallenges"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "areUnresolvedNodesLinear",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkDecidableNextNode",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "findNodeConflict",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "findStakerConflict",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakers",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "latestStaked",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "refundableStakers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requireConfirmable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requireRejectable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedNodes",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "timedOutChallenges",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "areUnresolvedNodesLinear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkDecidableNextNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findNodeConflict",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findStakerConflict",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStakers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundableStakers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireConfirmable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireRejectable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timedOutChallenges",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ValidatorUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ValidatorUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    areUnresolvedNodesLinear(
      rollup: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkDecidableNextNode(
      rollup: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    findNodeConflict(
      rollup: PromiseOrValue<string>,
      node1: PromiseOrValue<BigNumberish>,
      node2: PromiseOrValue<BigNumberish>,
      maxDepth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ValidatorUtils.NodeConflictStructOutput]>;

    findStakerConflict(
      rollup: PromiseOrValue<string>,
      staker1: PromiseOrValue<string>,
      staker2: PromiseOrValue<string>,
      maxDepth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ValidatorUtils.NodeConflictStructOutput]>;

    getStakers(
      rollup: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], boolean] & { hasMore: boolean }>;

    latestStaked(
      rollup: PromiseOrValue<string>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, NodeStructOutput]>;

    refundableStakers(
      rollup: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    requireConfirmable(
      rollup: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    requireRejectable(
      rollup: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    stakedNodes(
      rollup: PromiseOrValue<string>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    timedOutChallenges(
      rollup: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], boolean] & { hasMore: boolean }>;
  };

  areUnresolvedNodesLinear(
    rollup: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkDecidableNextNode(
    rollup: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  findNodeConflict(
    rollup: PromiseOrValue<string>,
    node1: PromiseOrValue<BigNumberish>,
    node2: PromiseOrValue<BigNumberish>,
    maxDepth: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ValidatorUtils.NodeConflictStructOutput>;

  findStakerConflict(
    rollup: PromiseOrValue<string>,
    staker1: PromiseOrValue<string>,
    staker2: PromiseOrValue<string>,
    maxDepth: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ValidatorUtils.NodeConflictStructOutput>;

  getStakers(
    rollup: PromiseOrValue<string>,
    startIndex: PromiseOrValue<BigNumberish>,
    max: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string[], boolean] & { hasMore: boolean }>;

  latestStaked(
    rollup: PromiseOrValue<string>,
    staker: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, NodeStructOutput]>;

  refundableStakers(
    rollup: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  requireConfirmable(
    rollup: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  requireRejectable(
    rollup: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  stakedNodes(
    rollup: PromiseOrValue<string>,
    staker: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  timedOutChallenges(
    rollup: PromiseOrValue<string>,
    startIndex: PromiseOrValue<BigNumberish>,
    max: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], boolean] & { hasMore: boolean }>;

  callStatic: {
    areUnresolvedNodesLinear(
      rollup: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkDecidableNextNode(
      rollup: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    findNodeConflict(
      rollup: PromiseOrValue<string>,
      node1: PromiseOrValue<BigNumberish>,
      node2: PromiseOrValue<BigNumberish>,
      maxDepth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ValidatorUtils.NodeConflictStructOutput>;

    findStakerConflict(
      rollup: PromiseOrValue<string>,
      staker1: PromiseOrValue<string>,
      staker2: PromiseOrValue<string>,
      maxDepth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ValidatorUtils.NodeConflictStructOutput>;

    getStakers(
      rollup: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], boolean] & { hasMore: boolean }>;

    latestStaked(
      rollup: PromiseOrValue<string>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, NodeStructOutput]>;

    refundableStakers(
      rollup: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    requireConfirmable(
      rollup: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    requireRejectable(
      rollup: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakedNodes(
      rollup: PromiseOrValue<string>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    timedOutChallenges(
      rollup: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], boolean] & { hasMore: boolean }>;
  };

  filters: {};

  estimateGas: {
    areUnresolvedNodesLinear(
      rollup: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkDecidableNextNode(
      rollup: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findNodeConflict(
      rollup: PromiseOrValue<string>,
      node1: PromiseOrValue<BigNumberish>,
      node2: PromiseOrValue<BigNumberish>,
      maxDepth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findStakerConflict(
      rollup: PromiseOrValue<string>,
      staker1: PromiseOrValue<string>,
      staker2: PromiseOrValue<string>,
      maxDepth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakers(
      rollup: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestStaked(
      rollup: PromiseOrValue<string>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refundableStakers(
      rollup: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireConfirmable(
      rollup: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireRejectable(
      rollup: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakedNodes(
      rollup: PromiseOrValue<string>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timedOutChallenges(
      rollup: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    areUnresolvedNodesLinear(
      rollup: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkDecidableNextNode(
      rollup: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findNodeConflict(
      rollup: PromiseOrValue<string>,
      node1: PromiseOrValue<BigNumberish>,
      node2: PromiseOrValue<BigNumberish>,
      maxDepth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findStakerConflict(
      rollup: PromiseOrValue<string>,
      staker1: PromiseOrValue<string>,
      staker2: PromiseOrValue<string>,
      maxDepth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakers(
      rollup: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestStaked(
      rollup: PromiseOrValue<string>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refundableStakers(
      rollup: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireConfirmable(
      rollup: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireRejectable(
      rollup: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakedNodes(
      rollup: PromiseOrValue<string>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timedOutChallenges(
      rollup: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
