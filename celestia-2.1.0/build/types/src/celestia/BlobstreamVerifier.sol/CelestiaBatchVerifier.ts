/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type NamespaceStruct = {
  version: PromiseOrValue<BytesLike>;
  id: PromiseOrValue<BytesLike>;
};

export type NamespaceStructOutput = [string, string] & {
  version: string;
  id: string;
};

export type NamespaceNodeStruct = {
  min: NamespaceStruct;
  max: NamespaceStruct;
  digest: PromiseOrValue<BytesLike>;
};

export type NamespaceNodeStructOutput = [
  NamespaceStructOutput,
  NamespaceStructOutput,
  string
] & { min: NamespaceStructOutput; max: NamespaceStructOutput; digest: string };

export type BinaryMerkleProofStruct = {
  sideNodes: PromiseOrValue<BytesLike>[];
  key: PromiseOrValue<BigNumberish>;
  numLeaves: PromiseOrValue<BigNumberish>;
};

export type BinaryMerkleProofStructOutput = [string[], BigNumber, BigNumber] & {
  sideNodes: string[];
  key: BigNumber;
  numLeaves: BigNumber;
};

export type DataRootTupleStruct = {
  height: PromiseOrValue<BigNumberish>;
  dataRoot: PromiseOrValue<BytesLike>;
};

export type DataRootTupleStructOutput = [BigNumber, string] & {
  height: BigNumber;
  dataRoot: string;
};

export type AttestationProofStruct = {
  tupleRootNonce: PromiseOrValue<BigNumberish>;
  tuple: DataRootTupleStruct;
  proof: BinaryMerkleProofStruct;
};

export type AttestationProofStructOutput = [
  BigNumber,
  DataRootTupleStructOutput,
  BinaryMerkleProofStructOutput
] & {
  tupleRootNonce: BigNumber;
  tuple: DataRootTupleStructOutput;
  proof: BinaryMerkleProofStructOutput;
};

export interface CelestiaBatchVerifierInterface extends utils.Interface {
  functions: {
    "verifyProof(address,((bytes1,bytes28),(bytes1,bytes28),bytes32),(bytes32[],uint256,uint256),(uint256,(uint256,bytes32),(bytes32[],uint256,uint256)))": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "verifyProof"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [
      PromiseOrValue<string>,
      NamespaceNodeStruct,
      BinaryMerkleProofStruct,
      AttestationProofStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;

  events: {};
}

export interface CelestiaBatchVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CelestiaBatchVerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    verifyProof(
      _blobstream: PromiseOrValue<string>,
      _rowRoot: NamespaceNodeStruct,
      _rowProof: BinaryMerkleProofStruct,
      _attestationProof: AttestationProofStruct,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BinaryMerkleProofStructOutput] & {
        isValid: boolean;
        proofHeight: BigNumber;
        proofDataRoot: string;
        rowProof: BinaryMerkleProofStructOutput;
      }
    >;
  };

  verifyProof(
    _blobstream: PromiseOrValue<string>,
    _rowRoot: NamespaceNodeStruct,
    _rowProof: BinaryMerkleProofStruct,
    _attestationProof: AttestationProofStruct,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, string, BinaryMerkleProofStructOutput] & {
      isValid: boolean;
      proofHeight: BigNumber;
      proofDataRoot: string;
      rowProof: BinaryMerkleProofStructOutput;
    }
  >;

  callStatic: {
    verifyProof(
      _blobstream: PromiseOrValue<string>,
      _rowRoot: NamespaceNodeStruct,
      _rowProof: BinaryMerkleProofStruct,
      _attestationProof: AttestationProofStruct,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BinaryMerkleProofStructOutput] & {
        isValid: boolean;
        proofHeight: BigNumber;
        proofDataRoot: string;
        rowProof: BinaryMerkleProofStructOutput;
      }
    >;
  };

  filters: {};

  estimateGas: {
    verifyProof(
      _blobstream: PromiseOrValue<string>,
      _rowRoot: NamespaceNodeStruct,
      _rowProof: BinaryMerkleProofStruct,
      _attestationProof: AttestationProofStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    verifyProof(
      _blobstream: PromiseOrValue<string>,
      _rowRoot: NamespaceNodeStruct,
      _rowProof: BinaryMerkleProofStruct,
      _attestationProof: AttestationProofStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
