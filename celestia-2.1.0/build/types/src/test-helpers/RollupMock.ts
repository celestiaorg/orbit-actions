/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface RollupMockInterface extends utils.Interface {
  functions: {
    "owner()": FunctionFragment;
    "removeOldZombies(uint256)": FunctionFragment;
    "withdrawStakerFunds()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "owner" | "removeOldZombies" | "withdrawStakerFunds"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeOldZombies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStakerFunds",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOldZombies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStakerFunds",
    data: BytesLike
  ): Result;

  events: {
    "WithdrawTriggered()": EventFragment;
    "ZombieTriggered()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "WithdrawTriggered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZombieTriggered"): EventFragment;
}

export interface WithdrawTriggeredEventObject {}
export type WithdrawTriggeredEvent = TypedEvent<
  [],
  WithdrawTriggeredEventObject
>;

export type WithdrawTriggeredEventFilter =
  TypedEventFilter<WithdrawTriggeredEvent>;

export interface ZombieTriggeredEventObject {}
export type ZombieTriggeredEvent = TypedEvent<[], ZombieTriggeredEventObject>;

export type ZombieTriggeredEventFilter = TypedEventFilter<ZombieTriggeredEvent>;

export interface RollupMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RollupMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    owner(overrides?: CallOverrides): Promise<[string]>;

    removeOldZombies(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawStakerFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  owner(overrides?: CallOverrides): Promise<string>;

  removeOldZombies(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawStakerFunds(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    owner(overrides?: CallOverrides): Promise<string>;

    removeOldZombies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawStakerFunds(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "WithdrawTriggered()"(): WithdrawTriggeredEventFilter;
    WithdrawTriggered(): WithdrawTriggeredEventFilter;

    "ZombieTriggered()"(): ZombieTriggeredEventFilter;
    ZombieTriggered(): ZombieTriggeredEventFilter;
  };

  estimateGas: {
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeOldZombies(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawStakerFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeOldZombies(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawStakerFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
